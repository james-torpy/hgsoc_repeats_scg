ctlGenes$type <- "ctl"
}
{}
}
otherGenes <- allGenes[allGenes$symbol %in% other_df$symbol, ]
m <- match(otherGenes$symbol, other_df$symbol)
otherGenes$type <- other_df$FDR[m]
sig_other <- sig_gc[sig_gc$symbol %in% other_df$symbol,]
m <- match(sig_other$symbol, other_df$symbol)
sig_other$type <- other_df$FDR[m]
lab <- rbind(sig_other, ctlGenes)
lab$genes <- rownames(lab)
otherGenes <- rbind(otherGenes, ctlGenes)
# combine 'threshold' and 'type' columns:
otherGenes$type_thresh <- paste0(otherGenes$type, "_", otherGenes$threshold)
lab$type_thresh <- paste0(lab$type, "_", lab$threshold)
lab$genes <- lab$symbol
# set up colour vector for plot:
cols <- brewer.pal(8, "Paired")
cols <- cols[c(2, 8, 4, 5, 3, 5)]
otherGenes$type_thresh <- factor(otherGenes$type_thresh, levels = c("ctl_NEGATIVE", "ctl_POSSIG", "0.1_TRUE",
"0.1_FALSE", "0.3_TRUE", "0.3_FALSE"))
# plot on volcano plot:
p <- ggplot(data=otherGenes, aes( x=logFC, y=-log10(FDR), color=type_thresh))
p <- p + geom_point(data=otherGenes)
p <- p + geom_text_repel(data=lab, aes(label=genes))
p <- p + theme(legend.position =  "none")
p <- p + labs(x="log2 fold change vs FT control", y="-log10 FDR")
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = cols)
p <- p +  xlim(c(-5, 5))
p
dev.off()
dev.off()
p
cols
otherGenes$type_thresh
cols <- c("deep_pink", cols[c(8, 4, 5, 3, 5)])
cols
cols <- c("deep_pink", "forest_green", cols[c(4, 5, 3, 5)])
cols
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = cols)
p
cols <- c("deep_pink", "forestgreen", cols[c(4, 5, 3, 5)])
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = cols)
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = cols)
p
cols <- c("deeppink", "forestgreen", cols[c(4, 5, 3, 5)])
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = cols)
p
cols <- c("forestgreen", "deepskyblue", cols[c(4, 5, 3, 5)])
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = cols)
p
cols <- c("forestgreen", "deeppink2", "deepskyblue", cols[c(5, 3, 5)])
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = cols)
p
cols <- c("forestgreen", "deeppink2", "darkorchid4", "deepskyblue", cols[c(3, 5)])
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = cols)
p
cols <- c("forestgreen", "deeppink2", "darkorchid4", "deepskyblue", "firebrick2")
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = cols)
p
cols <- c("forestgreen", "deeppink2", "darkorchid4", "firebrick2",
"deepskyblue", "firebrick2")
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = cols)
p
pdf(file = paste0(plotDir, "/",   Type,  "_volcano_FDR_",  FDRthresh, "_", comp, "_other_genes2.pdf"))
print(p)
dev.off()
er with:
#briR
#qsub -N salDE -b y -wd \
#/share/ClusterShare/thingamajigs/jamtor/projects/hgsoc_repeats/RNA-seq/logs/exp9/DE \
#-j y -R y -pe smp 2 -V "Rscript /share/ClusterShare/thingamajigs/jamtor/projects/hgsoc_repeats/RNA-seq/scripts/repeatsPipeline/exp9/13.DE_master.R"
### 0. Define variables/paths ###
# load packages needed:
library(tibble)
library(dplyr)
library(RColorBrewer)
library(RUVSeq)
library(ggplot2)
library(ggrepel)
library(preprocessCore)
library(edgeR)
library(org.Hs.eg.db)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
################################################################################
### Options ###
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_vs_FT ###
sTypes <- c("FT", "HGSOC")
sGroups <- list("FT", c("prPT", "rfPT", "arPT", "mrPT", "erPT"))
names(sGroups) <- sTypes
descrip <- "htseq_EdgeR_primary_HGSOC_vs_FT_with_chromatin_remodellers"
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_CCNEamp_vs_HRD ###
#sTypes <- c("bothDrivers", "FT", "HRD", "CCNEamp", "unknown_driver")
#descrip <- "htseq_EdgeR_primary_HGSOC_CCNEamp_vs_HRD"
################################################################################
################################################################################
### htseq_EdgeR_HGSOC_drug_cats_vs_FT ###
#sTypes <- c("FT", "primary_resistant", "acquired_resistant", "drug_responders",
#  "recurrent_ascites", "metastatic")
#sGroups <- list("FT", "prPT", "rfPT", "arPT", "mrPT", "erPT", "rcAF", "msST")
#names(sGroups) <- sTypes
#descrip <- "htseq_EdgeR_HGSOC_drug_cats_vs_FT"
################################################################################
################################################################################
### SalmonTE_primary_HGSOC_CCNEamp_vs_HRD ###
#sTypes <- c("bothDrivers", "FT", "HRD", "CCNEamp", "unknown_driver")
#descrip <- "SalmonTE_primary_HGSOC_CCNEamp_vs_HRD"
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_vs_FT_with_LINE1_silencers ###
sTypes <- c("FT", "HGSOC")
sGroups <- list("FT", c("prPT", "rfPT", "arPT", "mrPT", "erPT"))
names(sGroups) <- sTypes
descrip <- "htseq_EdgeR_primary_HGSOC_vs_FT_with_LINE1_silencers"
################################################################################
################################################################################
### htseq_EdgeR_primary-resistant_HGSOC_vs_non-primary-resistant_HGSOC_with_liu_L1_repressors ###
# sTypes <- c("non-pr_HGSOC", "pr_HGSOC")
# sGroups <- list(c("arPT", "mrPT", "erPT"), c("prPT", "rfPT"))
# names(sGroups) <- sTypes
# descrip <-
#   "htseq_EdgeR_primary-resistant_HGSOC_vs_non-primary-resistant_HGSOC_with_liu_L1_repressors"
################################################################################
# define comparison parameters:
primaryOnly <- TRUE
cat_by_driver <- FALSE
EDAnormalise <- FALSE
count_tool <- "EdgeR"
customSamples <- FALSE
# define custom samples if needed:
#cus <- c("")
# specify what combination of repeat genes (repeats) and other genes,
# (all, both, other) should contribute to the results:
resultTypes <- c("repeats", "other")
# define sample group to use as control:
ctl <- "FT"
# specify what FDR and log2 fold change thresholds to use:
FDRthresh <- 0.1
FCthresh <- 0
# specify control genes to include:
posGeneIDs <- c("ENSG00000111640", "ENSG00000196776")
posGeneNames <- c("GAPDH", "CD47")
negGeneIDs <- c("ENSG00000075624", "ENSG00000169919")
negGeneNames <- c("beta-actin", "GUSB")
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
refDir <- paste0(projectDir, "/refs/")
rawDir <- paste0(projectDir,
"/RNA-seq/raw_files/fullsamples/bowtell_primary/")
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/")
newRobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/", descrip, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/", descrip, "/")
system(paste0("mkdir -p ", plotDir))
system(paste0("mkdir -p ", newRobjectDir))
# specify other genes to include if necessary:
other_df <- read.csv(paste0(refDir, "/chromatin_remodellers.csv"), header=T)
otherIDs <- other_df$ensembl_id
otherSym <- other_df$symbol
################################################################################
### 1. Load in all counts ###
################################################################################
# define functions for this section:
counts_bind <- function(counts1, counts2) {
# append counts1 to counts2:
counts_all <- rbind(custom3Counts, gcCounts)
# make rownames gene_id, get rid of latter column and change
# storage mode from factor to integer:
rownames(counts_all) <- counts_all$gene_id
return(subset(counts_all, select=-gene_id))
}
if ( count_tool=="EdgeR" ) {
if ( !file.exists(paste0(RobjectDir, "/", Type, "_", count_tool,
"_counts.rds")) ) {
writeLines("\n")
print("EdgeR counts data frame does not exist, creating now...")
custom3Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds"))
gcCounts <- readRDS(paste0(RobjectDir, "/gc_allcounts.htseq.rds"))
# append gcCounts to custom3Counts:
Counts <- counts_bind(custom3Counts, gcCounts)
saveRDS(Counts, paste0(RobjectDir, "/", Type, "_", count_tool,
"_counts.rds"))
} else {
print("Loading EdgeR counts data frame...")
Counts <- readRDS(paste0(RobjectDir, "/", Type, "_", count_tool,
"_counts.rds"))
}
} else if ( count_tool=="SalmonTE" ) {
if ( !file.exists(paste0(RobjectDir, "/", Type,
"_", count_tool, "_counts.rds")) ) {
writeLines("\n")
print("SalmonTE counts data frame does not exist, creating now...")
custom3Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_counts.SalmonTE.rds"))
gcCounts <- readRDS(paste0(RobjectDir, "/gc_counts.Salmon.rds"))
# append gcCounts to custom3Counts:
Counts <- counts_bind(custom3Counts, gcCounts)
saveRDS(Counts, (paste0(RobjectDir, "/", Type, "SalmonTE_counts.rds")))
} else {
print("Loading SalmonTE counts data frame...")
Counts <- readRDS(file=paste0(RobjectDir, "/", Type,
"SalmonTE_counts.rds"))
}
}
if ( primaryOnly == TRUE) {
Counts <- Counts[,grep("PT|FT", colnames(Counts))]
}
# select custom samples:
if (customSamples) {
Counts <- Counts[,colnames(Counts) %in% cus]
}
# re-categorize samples as HRD, CCNE_amp, both_drivers or unknown_drivers:
if ( cat_by_driver ) {
# load in sample key for categories homologous repair deficient (HRD) and
#cyclin E gain/amplification (CCNE):
HRDkey <- read.table(paste0(rawDir, "/hrd_samples.txt"), header=F, sep="\t")
HRDnos <- gsub("AOCS_", "", HRDkey[,1])
CCNEkey <- read.table(paste0(rawDir, "/ccne_gain_or_amp_samples.txt"),
header=F, sep="\t")
CCNEnos <- gsub("AOCS_", "", CCNEkey[,1])
Counts <- Counts[,grep("rcAF|pAF|msST", colnames(Counts), invert=T)]
for (i in 1:length(colnames(Counts))) {
print(i)
if (length(grep("FT", colnames(Counts)[i]))<1) {
no <- gsub(
"_[a-zA-Z].*$", "", gsub("AOCS_", "", colnames(Counts)[i])
)
print(paste0("ID number is ", no))
if (no %in% HRDnos & no %in% CCNEnos) {
colnames(Counts)[i] <- paste0(colnames(Counts)[i], "_bothDrivers")
} else if (no %in% HRDnos & !(no %in% CCNEnos)) {
colnames(Counts)[i] <- paste0(colnames(Counts)[i], "_HRD")
} else if (no %in% CCNEnos & !(no %in% HRDnos)) {
colnames(Counts)[i] <- paste0(colnames(Counts)[i], "_CCNEamp")
} else if (!(no %in% HRDnos | no %in% CCNEnos)) {
colnames(Counts)[i] <- paste0(colnames(Counts)[i], "_unknown_drivers")
}
colnames(Counts)[i] <- gsub("[a-z].*[A-Z][A-Z]_", "",
colnames(Counts)[i])
}
}
} else {
# remove any samples not belonging to any group:
Counts <- Counts[, colnames(
Counts[, gsub(
".*\\_", "", colnames(Counts)
) %in% unlist(sGroups)]
)]
}
# change sample names according to grouping:
for (i in 1:length(sGroups)) {
for (n in sGroups[[i]]) {
colnames(Counts) <- gsub(n, names(sGroups)[i], colnames(Counts))
}
}
# eliminate lowly expressed genes (rows where there are less than 3 counts
# where df > 4):
print(paste0("No. rows before filtering is: ", nrow(Counts)))
Counts <- Counts %>%
rownames_to_column('gene_id') %>%
dplyr::filter(rowSums(Counts > 5) >= (ncol(Counts)/3)) %>%
column_to_rownames('gene_id')
print(paste0("No. rows after  filtering: ", nrow(Counts)))
############################################################################
### 2. Perform pre-normalisation PCA and RLE plots ###
############################################################################
# create pre-normalised PCA plot from counts and plot:
if (ncol(Counts) > nrow(Counts)) {
pca <- prcomp(Counts)
} else {
pca <- princomp(Counts)
}
if (file.exists(paste0(plotDir, "/", Type, "_pcaCompsPrenormGC.pdf"))) {
print(paste0(plotDir, "/", Type, "_pcaCompsPrenormGC.pdf already exists,
no need to create"))
} else {
print(paste0("Creating ", plotDir, "/", Type, "_pcaCompsPrenormGC.pdf"))
pdf(file = paste0(plotDir, "/", Type, "_pcaCompsPrenormGC.pdf"))
plot(pca)
dev.off()
}
# change the order of columns of Counts to alphabetical order:
Counts <- Counts[,order(
gsub(
"AOCS.*_[0-9][0-9][0-9]_", "", colnames(Counts)
)
)]
# define sample groups:
splt <- unlist(
lapply(
split(
colnames(Counts), gsub(
"AOCS.*_[0-9][0-9][0-9]_", "", colnames(Counts)
)
), length
)
)
for (i in 1:length(splt)) {
if (i==1) {
typeF <- c(rep(names(splt)[i], splt[i]))
} else {
typeF <- c(typeF, rep(names(splt)[i], splt[i]))
}
}
levels(typeF) <- sTypes
sampleNos <- unlist(
lapply(
split(
colnames(Counts), gsub(
"\\.1", "", gsub(
"AOCS.*_[0-9][0-9][0-9]_", "", colnames(Counts)
)
)
), length
)
)
saveRDS(sampleNos, file = paste0(newRobjectDir, "/sample_no_per_cat.rds"))
# convert Counts into SeqExpressionSet - elements need to be delisted and
# changed to integers first:
Counts <- apply(Counts, 2, unlist)
storage.mode(Counts) <- "integer"
set <- newSeqExpressionSet(Counts, phenoData = data.frame(typeF,
row.names=colnames(Counts)))
# create pre-norm RLE plot:
if (file.exists(paste0(plotDir, "/", Type, "_RLEPrenormGC.pdf"))) {
print(paste0(plotDir, "/", Type, "_RLEPrenormGC.pdf already exists,
no need to create"))
} else {
print(paste0("Creating ", plotDir, "/", Type, "_RLEPrenormGC.pdf"))
par(mar=c(1,1,1,1))
pdf(file = paste0(plotDir, "/", Type, "_RLEPrenormGC.pdf"))
plotRLE(set)
dev.off()
}
# create RUVseq pre-norm PCA:
if (file.exists(paste0(plotDir, "/", Type, "_pcaPrenormGC.pdf"))) {
print(paste0(plotDir, "/", Type, "_pcaPrenormGC.pdf already exists,
no need to create"))
} else {
print(paste0("Creating ", plotDir, "/", Type, "_pcaPrenormGC.pdf"))
pdf(file = paste0(plotDir, "/", Type, "_pcaPrenormGC.pdf"), height = 10,
width = 12)
plotPCA(set, cex=0.7)
dev.off()
}
##############################################################################
### 3. perform normalisation and DE on counts:
##############################################################################
if ( EDAnormalise == TRUE ) {
# perform between lane full normalisation:
nSet <- betweenLaneNormalization(set, which="full",offset=TRUE)
# design matrix labelling all sample types:
design <- model.matrix(~0+typeF, data=pData(nSet))
# calculate the deviance residuals from a first-pass GLM regression of the counts he co-variates of interest (p8 RUVseq manual):
# estimate dispersion:
disp <- estimateGLMCommonDisp(counts(nSet),
design, offset=-offst(nSet))
# adjust values using dispersion:
fit <- glmFit(counts(nSet), design, disp, offset=-offst(nSet))
saveRDS(fit, file=paste0(newRobjectDir, "/", Type, "DEfit.rds"))
save.image(paste0(newRobjectDir, "/", Type, "DEdone.rds"))
} else {
# perform between lane full normalisation:
y <- DGEList(counts = Counts, group = typeF)
# normalise for library size:
y <- calcNormFactors(y)
# create an MDS plot to show relative similarities of the samples and save to Dir:
if (file.exists(paste0(plotDir, "/edger_MDS.pdf"))) {
paste0(plotDir, "/edger_MDS.pdf already exists")
pdf(paste0(plotDir, "/edger_MDS.pdf"),width=16,height=12)
plotMDS(y)
} else {
paste0("Generating ", plotDir, "/edger_MDS.pdf")
pdf(paste0(plotDir, "/edger_MDS.pdf"),width=16,height=12)
plotMDS(y)
dev.off()
}
# calculate normalisation factors and create post-norm RLE and PCA plots:
if ( file.exists(paste0(RobjectDir, "/edgeRnorms.rds")) ) {
norms <- readRDS(paste0(RobjectDir, "/edgeRnorms.rds"))
} else {
for (n in 1:nrow(Counts)) {
print(n)
if (n==1) {
norms <- t(as.matrix(y$samples$norm.factors))
} else {
norms <- rbind(norms, norms[1,])
}
}
saveRDS(norms, paste0(RobjectDir, "/edgeRnorms.rds"))
}
colnames(norms) <- colnames(Counts)
nSet <- newSeqExpressionSet(Counts, offset = norms, phenoData = data.frame(typeF, row.names=colnames(Counts)))
# design matrix labelling all sample types:
design <- model.matrix(~0+typeF)
# estimate dispersion:
disp <- estimateDisp(y, design=design)
# adjust values using dispersion:
fit <- glmFit(disp, design=design, robust=TRUE)
saveRDS(fit, file=paste0(newRobjectDir, "/", Type, "DEfit.rds"))
save.image(paste0(newRobjectDir, "/", Type, "DEdone.rds"))
}
# create post-norm RLE plot:
if (file.exists(paste0(plotDir, "/", Type, "_RLElaneNormGC.pdf"))) {
print(paste0(plotDir, "/", Type, "_RLElaneNormGC.pdf already exists, no need to create"))
} else {
print(paste0("Creating ", plotDir, "/", Type, "_RLElaneNormGC.pdf"))
pdf(file = paste0(plotDir, "/", Type, "_RLElaneNormGC.pdf"))
plotRLE(nSet, outline=FALSE, ylim=c(-4, 4))
dev.off()
}
# create post-norm PCA:
if (file.exists(paste0(plotDir, "/", Type, "_pcalaneNormGC.pdf"))) {
print(paste0(plotDir, "/", Type, "_pcalaneNormGC.pdf already exists, no need to create"))
} else {
print(paste0("Creating ", plotDir, "/", Type, "_pcalaneNormGC.pdf"))
pdf(file = paste0(plotDir, "/", Type, "_pcalaneNormGC.pdf"), height = 15, width = 15)
plotPCA(nSet, cex=0.7)
dev.off()
}
# determine which column has FT control:
ctlInd <- grep(ctl, colnames(design))
con <- c(rep(0, (ctlInd - 1) ), -1, rep(0, (ncol(design) - ctlInd)))
# put sTypes in alphabetical order:
sTypes <- sTypes[order(sTypes)]
# check parameters and give the user the option to continue or not:
writeLines("\n")
print("Contrast is: ")
print(con)
print("Column names of design are: ")
print(colnames(design))
print("Design matrix is: ")
print(design)
ctlInd
i=2
comp <- paste0(sTypes[i], "_vs_", ctl)
# perform likelihood ratio test:
con[i] <- 1
lrt <- glmLRT(fit, contrast = con)
# fetch all gene DE info,
allGenes <- as.data.frame(topTags(lrt, n=Inf))
# fetch summary of differentially expressed genes (those  with FDR =< 0.05:
DEs <- summary(result <- decideTestsDGE((lrt)))
DEs
head(allGenes)
egENSEMBL <- toTable(org.Hs.egENSEMBL)
egSYMBOL <- toTable(org.Hs.egSYMBOL)
allGenes$gene_id <- egENSEMBL$gene_id[match(rownames(allGenes), egENSEMBL$ensembl_id)]
allGenes$symbol <- egSYMBOL$symbol[match(allGenes$gene_id, egSYMBOL$gene_id)]
head(allGenes)
allGenes[grep("ATP", allGenes$symbol),]
allGenes[grep("ATP3", allGenes$symbol),]
allGenes[grep("ATP2", allGenes$symbol),]
2^0.31
log2(1.24)
emma <- allGenes[grep("ATP", allGenes$symbol),]
write.table(emma, paste0(plotDir, "/ATPase_DE.txt"), quote=F, sep="\t", row.names = T, col.names = T)
plotDir
# load list of differentially expressed repeats to determine
# whether they are correlated with SV:
DEreps <- readRDS(file = paste0(RobjectDir,
"/DEverify/htseq_EdgeR_primary_HGSOC_vs_FT/custom3_DEsigReps.rds"))
DEreps <- rownames(DEreps[[1]])
DEreps
plotDir
write.table(DEreps, "/Users/jamestorpy/clusterHome//projects/hgsoc_repeats/RNA-seq/results/R/exp9/plots/DEplots/DErep_symbols.txt", sep = "\t", quote = F)
write.table(DEreps, "/Users/jamestorpy/clusterHome//projects/hgsoc_repeats/RNA-seq/results/R/exp9/plots/DEplots/DErep_symbols.txt", sep = "\t", quote = F, row.names = F)
write.table(DEreps, "/Users/jamestorpy/clusterHome//projects/hgsoc_repeats/RNA-seq/results/R/exp9/plots/DEplots/DErep_symbols.txt", sep = "\t", quote = F, row.names = F, col.names = F)
