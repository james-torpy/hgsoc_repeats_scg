"other", "repeat", "ribosome")
colnames(Counts[[5]])
Counts[[5]]
names(Counts[[5]])
names(Counts[[4]])
identical(names(Counts[[4]]), names(Counts[[5]]))
names(Counts) <- c("protein-coding", "non-coding",
"other", "repeat", "ribosome")
### 3. Create total mapped vs total counts scatter
# plot ###
total_gcCounts <- apply(gcCounts, 2, sum)
mapVcount <- data.frame(gcMapped, total_gcCounts)
mapVcount$samples <- rownames(mapVcount)
p <- ggplot(mapVcount, aes(x=gcMapped,
y=total_gcCounts))
p <- p + geom_point()
p
pdf(paste0(plotDir, "/mapped_vs_counts.pdf"))
p
dev.off()
### 5. Create composition barplots ###
# convert Counts to a dataframe:
countsDF <- as.data.frame(t(do.call("cbind", Counts)))
# add rownames as column and melt dataframe:
countsDF$gene_type <- rownames(countsDF)
# calculate percentages as new data frame:
perCountsDF <- as.data.frame(apply(countsDF[,1:ncol(countsDF)-1],
2, function(x) {
return(as.integer(x)/as.integer(sum(x))*100)
}))
perCountsDF$gene_type <- countsDF$gene_type
# create composition barplots of CountsDF and
# perCountsDF:
cDFs <- list(countsDF, perCountsDF)
Plots <- list()
for (i in 1:2) {
pCounts <- melt(cDFs[i], variable.name = "sample")
pCounts$gene_type <- factor(pCounts$gene_type,
levels = c("non-coding", "ribosome", "other",
"repeat", "protein-coding"))
# plot data as barplot:
p <- ggplot(pCounts, aes(x=sample, y=value))
p <- p + geom_bar(stat="identity",
aes(fill=gene_type))
p <- p + scale_fill_manual(values = c("#00BF7D",
"#AA4499", "#00B0F6", "#DDCC77", "#F8766D"))
Plots[[i]] <- p + theme(text = element_text(size=20),
axis.text.x = element_text(angle = 90))
i=i+1
}
plotDir
if ( primaryOnly ) {
pdf(file = paste0(plotDir, "compBarplotCounts_primary.pdf"),
height=20, width=35)
} else {
pdf(file = paste0(plotDir, "compBarplotCounts.pdf"),
height=20, width=35)
}
Plots[[1]]
dev.off()
if ( primaryOnly ) {
pdf(file = paste0(plotDir, "compBarplotPercent_primary.pdf"),
height=20, width=35)
} else {
pdf(file = paste0(plotDir, "compBarplotPercent.pdf"),
height=20, width=35)
}
Plots[[2]]
dev.off()
head(pCounts)
unique(pCounts$sample)
length(unique(pCounts$sample))
Counts[[4]]
head(countsDF)
temp <- apply(subset(countsDF, select = -gene_type), 2, function(x) { return(x[4]/sum(x))})
temp
starRibo_dir
min(temp)
max(temp)
rm(list=ls())
# load packages needed:
library(tibble)
library(dplyr)
library(org.Hs.eg.db)
library(pheatmap)
library(ggplot2)
library(ggrepel)
library(org.Hs.eg.db)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "all"
descrip <- "htseq_EdgeR_primary_HGSOC_CCNEamp_vs_HRD"
EdgeR <- TRUE
DESeq2 <- FALSE
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
rawDir <- paste0(projectDir, "/RNA-seq/raw_files/fullsamples/bowtell_primary/")
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/DEverify/", descrip, "/")
newRobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/DEverify/", descrip, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/DEverify/htseq_vs_patch/", descrip, "/")
system(paste0("mkdir -p ", newRobjectDir))
system(paste0("mkdir -p ", plotDir))
### 1. Load in data ###
# load in my DE data:
allGenes <- readRDS(paste0(RobjectDir, "/CCNEamp_vs_HRD_allGenes.rds"))
sig <- readRDS(paste0(RobjectDir, "/CCNEamp_vs_HRD_sig.rds"))
# load in Patch data:
patch <- read.csv(file=paste0(rawDir, "/CCNEamp_vs_HRD_Patch_DE.csv"), header=T, fill=T)
colnames(patch)[1] <- "symbol"
patch_comp <- dplyr::select(merge(allGenes, patch, by="symbol"), symbol, logFC.x, FDR, logFC.y, Adjusted.P.value)
colnames(patch_comp) <- c("symbol", "my_logFC", "my_FDR", "Patch_logFC", "Patch_adj_Pvalue")
temp1 <- patch_comp[,c(1, 4, 5)]
colnames(temp1) <- c("symbol", "logFC", "adjPvalue_FDR")
temp1$type <- "patch"
temp1$threshold <- FALSE
temp1$threshold[temp1$adjPvalue_FDR < 0.005] <- TRUE
temp1$typethresh <- paste0(temp1$type, temp1$threshold)
temp2 <- patch_comp[,c(1, 2, 3)]
colnames(temp2) <- c("symbol", "logFC", "adjPvalue_FDR")
temp2$type <- "sig"
temp2$threshold <- FALSE
temp2$threshold[temp2$adjPvalue_FDR < 0.005] <- TRUE
temp2$typethresh <- paste0(temp2$type, temp2$threshold)
patch_comp_sep <- rbind(temp1, temp2)
lab3 <- patch_comp_sep[patch_comp_sep$threshold == TRUE,]
temp1 <- patch[,c(1, 2, 6)]
colnames(temp1) <- c("symbol", "logFC", "adjPvalue_FDR")
temp1$type <- "patch"
temp1$threshold <- FALSE
temp1$threshold[temp1$adjPvalue_FDR < 0.005] <- TRUE
temp1$typethresh <- paste0(temp1$type, temp1$threshold)
temp2 <- sig[,c(8, 1, 5)]
colnames(temp2) <- c("symbol", "logFC", "adjPvalue_FDR")
temp2$type <- "sig"
temp2$threshold <- FALSE
temp2$threshold[temp2$adjPvalue_FDR < 10e-20] <- TRUE
temp2$typethresh <- paste0(temp2$type, temp2$threshold)
patch_and_sig <- rbind(temp1, temp2)
lab2 <- patch_and_sig[patch_and_sig$threshold == TRUE,]
patch_and_sig
tail(patch_and_sig)
patch_and_sig$type
patch_and_sig$type
patch_comp <- dplyr::select(merge(allGenes, patch, by="symbol"), symbol, logFC.x, FDR, logFC.y, Adjusted.P.value)
colnames(patch_comp) <- c("symbol", "my_logFC", "my_FDR", "Patch_logFC", "Patch_adj_Pvalue")
# split into logFC and FDR dfs:
rownames(patch_comp) <- patch_comp$symbol
FC <- dplyr::select(patch_comp, my_logFC, Patch_logFC)
FDR <- dplyr::select(patch_comp, my_FDR, Patch_adj_Pvalue)
# create logFC and FDR heatmaps:
# resize margins for plots:
par(mar=c(4,4,4,4))
library(grid)
draw_colnames_45 <- function (coln, gaps, ...) {
coord = pheatmap:::find_coordinates(length(coln), gaps)
x = coord$coord - 0.5 * coord$size
res = textGrob(coln, x = x, y = unit(1, "npc") - unit(3,"bigpts"), vjust = 0.5, hjust = 1, rot = 45, gp = gpar(...))
return(res)}
## 'Overwrite' default draw_colnames with your own version
assignInNamespace(x="draw_colnames", value="draw_colnames_45",
ns=asNamespace("pheatmap"))
pdf(file = paste0(plotDir, "/htseq_vs_patch_CCNEamp_vs_HRD_heatmap.pdf"))
pheatmap(FC, color = colorRampPalette(c("#08519C", "white", "firebrick3"))(100),
display_numbers = as.matrix(ifelse(FDR < 0.1, "*", "")), fontsize = 8,
breaks = breaks)
dev.off()
} else if ( DESeq2 == TRUE ) {
egENSEMBL <- toTable(org.Hs.egENSEMBL)
egSYMBOL <- toTable(org.Hs.egSYMBOL)
allGenes$gene_id <- egENSEMBL$gene_id[match(rownames(allGenes), egENSEMBL$ensembl_id)]
allGenes$symbol <- egSYMBOL$symbol[match(allGenes$gene_id, egSYMBOL$gene_id)]
sig <- allGenes[allGenes$threshold == TRUE,]
patch_comp <- dplyr::select(merge(allGenes, patch, by="symbol"), symbol, log2FoldChange, padj, logFC, Adjusted.P.value)
colnames(patch_comp) <- c("symbol", "my_logFC", "my_FDR", "Patch_logFC", "Patch_adj_Pvalue")
temp1 <- patch_comp[,c(1, 4, 5)]
colnames(temp1) <- c("symbol", "logFC", "adjPvalue_FDR")
temp1$type <- "patch"
temp1$threshold <- FALSE
temp1$threshold[temp1$adjPvalue_FDR < 0.005] <- TRUE
temp1$typethresh <- paste0(temp1$type, temp1$threshold)
temp2 <- patch_comp[,c(1, 2, 3)]
colnames(temp2) <- c("symbol", "logFC", "adjPvalue_FDR")
temp2$type <- "sig"
temp2$threshold <- FALSE
temp2$threshold[temp2$adjPvalue_FDR < 0.005] <- TRUE
temp2$typethresh <- paste0(temp2$type, temp2$threshold)
patch_comp_sep <- rbind(temp1, temp2)
lab3 <- patch_comp_sep[patch_comp_sep$threshold == TRUE,]
pheatmap(FC, color = colorRampPalette(c("#08519C", "white", "firebrick3"))(100),
display_numbers = as.matrix(ifelse(FDR < 0.1, "*", "")), fontsize = 8)
c(seq(min(df), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(df)/paletteLength, max(df), length.out=floor(paletteLength/2)))
head(FC)
paletteLength
length.out=ceiling(4)
seq(min(df), 0, length.out=ceiling(paletteLength/2) + 1)
seq(4, -4, 0.1)
?seq
seq(4, -4, length.out = 50)
seq(4, 0, length.out = 25)
c(seq(4, 0, length.out = 25), seq(0, -4, length.out = 25)
)
breaks <- c(seq(4, 0, length.out = 25), seq(0, -4, length.out = 25))
pheatmap(FC, color = colorRampPalette(c("#08519C", "white", "firebrick3"))(100),
display_numbers = as.matrix(ifelse(FDR < 0.1, "*", "")), fontsize = 8,
breaks = breaks)
breaks
breaks <- unique(c(seq(4, 0, length.out = 25), seq(0, -4, length.out = 26)))
breaks
length(breaks)
# create 50 break intervals between 4 and -4, with 0 as the median:
breaks <- unique(c(seq(4, 0, length.out = 25), seq(0, -4, length.out = 26)))
pheatmap(FC, color = colorRampPalette(c("#08519C", "white", "firebrick3"))(100),
display_numbers = as.matrix(ifelse(FDR < 0.1, "*", "")), fontsize = 8,
breaks = breaks)
pheatmap(FC, color = colorRampPalette(c("#08519C", "white", "firebrick3"))(50),
display_numbers = as.matrix(ifelse(FDR < 0.1, "*", "")), fontsize = 8,
breaks = breaks)
# create 100 break intervals between 4 and -4, with 0 as the median:
breaks <- unique(c(seq(4, 0, length.out = 50), seq(0, -4, length.out = 51)))
pheatmap(FC, color = colorRampPalette(c("#08519C", "white", "firebrick3"))(100),
display_numbers = as.matrix(ifelse(FDR < 0.1, "*", "")), fontsize = 8,
breaks = breaks)
FC
# change order of data frame columns:
FC <- FC[,c(2,1)]
head(FC)
pheatmap(FC, color = colorRampPalette(c("#08519C", "white", "firebrick3"))(100),
display_numbers = as.matrix(ifelse(FDR < 0.1, "*", "")), fontsize = 8,
breaks = breaks)
pdf(file = paste0(plotDir, "/htseq_vs_patch_CCNEamp_vs_HRD_heatmap.pdf"))
pheatmap(FC, color = colorRampPalette(c("#08519C", "white", "firebrick3"))(100),
display_numbers = as.matrix(ifelse(FDR < 0.1, "*", "")), fontsize = 8,
breaks = breaks)
dev.off()
# load packages needed:
library(tibble)
library(dplyr)
library(RColorBrewer)
library(RUVSeq)
library(ggplot2)
library(ggrepel)
library(preprocessCore)
library(edgeR)
library(org.Hs.eg.db)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
################################################################################
### Options ###
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_vs_FT ###
sTypes <- c("FT", "HGSOC")
sGroups <- list("FT", c("prPT", "rfPT", "arPT", "mrPT", "erPT"))
names(sGroups) <- sTypes
descrip <- "htseq_EdgeR_primary_HGSOC_vs_FT"
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_CCNEamp_vs_HRD ###
#sTypes <- c("bothDrivers", "FT", "HRD", "CCNEamp", "unknown_driver")
#descrip <- "htseq_EdgeR_primary_HGSOC_CCNEamp_vs_HRD"
################################################################################
################################################################################
### htseq_EdgeR_HGSOC_drug_cats_vs_FT ###
#sTypes <- c("FT", "primary_resistant", "acquired_resistant", "drug_responders",
#  "recurrent_ascites", "metastatic")
#sGroups <- list("FT", "prPT", "rfPT", "arPT", "mrPT", "erPT", "rcAF", "msST")
#names(sGroups) <- sTypes
#descrip <- "htseq_EdgeR_HGSOC_drug_cats_vs_FT"
################################################################################
################################################################################
### SalmonTE_primary_HGSOC_CCNEamp_vs_HRD ###
#sTypes <- c("bothDrivers", "FT", "HRD", "CCNEamp", "unknown_driver")
#descrip <- "SalmonTE_primary_HGSOC_CCNEamp_vs_HRD"
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_vs_FT_with_LINE1_silencers ###
#sTypes <- c("FT", "HGSOC")
#sGroups <- list("FT", c("prPT", "rfPT", "arPT", "mrPT", "erPT"))
#names(sGroups) <- sTypes
#descrip <- "htseq_EdgeR_primary_HGSOC_vs_FT_with_LINE1_silencers"
################################################################################
# define comparison parameters:
primaryOnly <- TRUE
cat_by_driver <- FALSE
EDAnormalise <- FALSE
count_tool <- "EdgeR"
customSamples <- FALSE
# define custom samples if needed:
#cus <- c("")
# specify what combination of repeat genes (repeats) and other genes,
# (all, both, other) should contribute to the results:
resultTypes <- c("repeats", "gc", "both", "other")
# define sample group to use as control:
ctl <- "FT"
# specify what FDR and log2 fold change thresholds to use:
FDRthresh <- 0.05
FCthresh <- 1
# specify control genes to include:
posGeneIDs <- c("ENSG00000111640", "ENSG00000196776")
posGeneNames <- c("GAPDH", "CD47")
negGeneIDs <- c("ENSG00000075624", "ENSG00000169919")
negGeneNames <- c("beta-actin", "GUSB")
# specify other genes to include if necessary:
otherIDs <- c(# methylation factors:
"ENSG00000130816", "ENSG00000119772", "ENSG00000088305", "ENSG00000276043",
"ENSG00000138336", "ENSG00000168769", "ENSG00000187605", "ENSG00000101945",
# histone methylation factors:
"ENSG00000204371", "ENSG00000143379", "ENSG00000181090", "ENSG00000152455",
"ENSG00000108799", "ENSG00000106462", "ENSG00000074266", "ENSG00000178691",
"ENSG00000008083", "ENSG00000085224", "ENSG00000122565", "ENSG00000196591",
"ENSG00000171720",
# chromatin remodellers:
"ENSG00000128908", "ENSG00000183495", "ENSG00000080603", "ENSG00000153922",
"ENSG00000173575", "ENSG00000170004", "ENSG00000111642", "ENSG00000124177",
"ENSG00000171316", "ENSG00000100888", "ENSG00000177200", "ENSG00000116254",
"ENSG00000080503", "ENSG00000127616", "ENSG00000153147", "ENSG00000102038",
"ENSG00000076108",
# other L1 repressor components:
"ENSG00000128383", "ENSG00000179750", "ENSG00000128394",
"ENSG00000125207", "ENSG00000197181", "ENSG00000184571", "ENSG00000134627",
"ENSG00000104824", "ENSG00000136436", "ENSG00000161011")
otherSym <- c(# methylation factors:
"DNMT1", "DNMT3A", "DNMT3B", "UHRF1",
"TET1", "TET2", "TET3", "SUV39H1",
# histone methylation factors:
"EHMT2", "SETDB1", "EHMT1", "SUV39H2",
"EZH1", "EZH2", "EED", "SUZ12",
"JARID2", "ATRX", "CBX3", "HDAC2",
"HDAC3",
# chromatin remodellers:
"INO80", "EP400", "SRCAP", "CHD1",
"CHD2", "CHD3", "CHD4", "CHD6",
"CHD7", "CHD8", "CHD9", "CHD5",
"SMARCA2", "SMARCA4", "SMARCA5", "SMARCA1",
"BAZ2A",
# other L1 repressor components:
"APOBEC3A", "APOBEC3B", "APOBEC3F",
"PIWIL1", "PIWIL2", "PIWIL3", "PIWIL4",
"HNRNPL", "CALCOCO2", "SQSTM1")
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
rawDir <- paste0(projectDir,
"/RNA-seq/raw_files/fullsamples/bowtell_primary/")
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/")
newRobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/", descrip, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/", descrip, "/")
system(paste0("mkdir -p ", plotDir))
system(paste0("mkdir -p ", newRobjectDir))
################################################################################
### 1. Load in all counts ###
################################################################################
# define functions for this section:
counts_bind <- function(counts1, counts2) {
# append counts1 to counts2:
counts_all <- rbind(custom3Counts, gcCounts)
# make rownames gene_id, get rid of latter column and change
# storage mode from factor to integer:
rownames(counts_all) <- counts_all$gene_id
return(subset(counts_all, select=-gene_id))
}
if ( count_tool=="EdgeR" ) {
if ( !file.exists(paste0(RobjectDir, "/", Type, "_", count_tool,
"_counts.rds")) ) {
writeLines("\n")
print("EdgeR counts data frame does not exist, creating now...")
custom3Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds"))
gcCounts <- readRDS(paste0(RobjectDir, "/gc_allcounts.htseq.rds"))
# append gcCounts to custom3Counts:
Counts <- counts_bind(custom3Counts, gcCounts)
saveRDS(Counts, paste0(RobjectDir, "/", Type, "_", count_tool,
"_counts.rds"))
} else {
print("Loading EdgeR counts data frame...")
Counts <- readRDS(paste0(RobjectDir, "/", Type, "_", count_tool,
"_counts.rds"))
}
} else if ( count_tool=="SalmonTE" ) {
if ( !file.exists(paste0(RobjectDir, "/", Type,
"_", count_tool, "_counts.rds")) ) {
writeLines("\n")
print("SalmonTE counts data frame does not exist, creating now...")
custom3Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_counts.SalmonTE.rds"))
gcCounts <- readRDS(paste0(RobjectDir, "/gc_counts.Salmon.rds"))
# append gcCounts to custom3Counts:
Counts <- counts_bind(custom3Counts, gcCounts)
saveRDS(Counts, (paste0(RobjectDir, "/", Type, "SalmonTE_counts.rds")))
} else {
print("Loading SalmonTE counts data frame...")
Counts <- readRDS(file=paste0(RobjectDir, "/", Type,
"SalmonTE_counts.rds"))
}
}
if ( primaryOnly == TRUE) {
Counts <- Counts[,grep("PT|FT", colnames(Counts))]
}
# select custom samples:
if (customSamples) {
Counts <- Counts[,colnames(Counts) %in% cus]
}
# re-categorize samples as HRD, CCNE_amp, both_drivers or unknown_drivers:
if ( cat_by_driver ) {
# load in sample key for categories homologous repair deficient (HRD) and
#cyclin E gain/amplification (CCNE):
HRDkey <- read.table(paste0(rawDir, "/hrd_samples.txt"), header=F, sep="\t")
HRDnos <- gsub("AOCS_", "", HRDkey[,1])
CCNEkey <- read.table(paste0(rawDir, "/ccne_gain_or_amp_samples.txt"),
header=F, sep="\t")
CCNEnos <- gsub("AOCS_", "", CCNEkey[,1])
Counts <- Counts[,grep("rcAF|pAF|msST", colnames(Counts), invert=T)]
for (i in 1:length(colnames(Counts))) {
print(i)
if (length(grep("FT", colnames(Counts)[i]))<1) {
no <- gsub(
"_[a-zA-Z].*$", "", gsub("AOCS_", "", colnames(Counts)[i])
)
print(paste0("ID number is ", no))
if (no %in% HRDnos & no %in% CCNEnos) {
colnames(Counts)[i] <- paste0(colnames(Counts)[i], "_bothDrivers")
} else if (no %in% HRDnos & !(no %in% CCNEnos)) {
colnames(Counts)[i] <- paste0(colnames(Counts)[i], "_HRD")
} else if (no %in% CCNEnos & !(no %in% HRDnos)) {
colnames(Counts)[i] <- paste0(colnames(Counts)[i], "_CCNEamp")
} else if (!(no %in% HRDnos | no %in% CCNEnos)) {
colnames(Counts)[i] <- paste0(colnames(Counts)[i], "_unknown_drivers")
}
colnames(Counts)[i] <- gsub("[a-z].*[A-Z][A-Z]_", "",
colnames(Counts)[i])
}
}
} else {
# remove any samples not belonging to any group:
Counts <- Counts[, colnames(
Counts[, gsub(
".*\\_", "", colnames(Counts)
) %in% unlist(sGroups)]
)]
}
# change sample names according to grouping:
for (i in 1:length(sGroups)) {
for (n in sGroups[[i]]) {
colnames(Counts) <- gsub(n, names(sGroups)[i], colnames(Counts))
}
}
# eliminate lowly expressed genes (rows where there are less than 3 counts
# where df > 4):
print(paste0("No. rows before filtering is: ", nrow(Counts)))
Counts <- Counts %>%
rownames_to_column('gene_id') %>%
dplyr::filter(rowSums(Counts > 5) >= (ncol(Counts)/3)) %>%
column_to_rownames('gene_id')
print(paste0("No. rows after  filtering: ", nrow(Counts)))
############################################################################
### 2. Perform pre-normalisation PCA and RLE plots ###
############################################################################
# create pre-normalised PCA plot from counts and plot:
if (ncol(Counts) > nrow(Counts)) {
pca <- prcomp(Counts)
} else {
pca <- princomp(Counts)
}
if (file.exists(paste0(plotDir, "/", Type, "_pcaCompsPrenormGC.pdf"))) {
print(paste0(plotDir, "/", Type, "_pcaCompsPrenormGC.pdf already exists,
no need to create"))
} else {
print(paste0("Creating ", plotDir, "/", Type, "_pcaCompsPrenormGC.pdf"))
pdf(file = paste0(plotDir, "/", Type, "_pcaCompsPrenormGC.pdf"))
plot(pca)
dev.off()
}
# change the order of columns of Counts to alphabetical order:
Counts <- Counts[,order(
gsub(
"AOCS.*_[0-9][0-9][0-9]_", "", colnames(Counts)
)
)]
# define sample groups:
splt <- unlist(
lapply(
split(
colnames(Counts), gsub(
"AOCS.*_[0-9][0-9][0-9]_", "", colnames(Counts)
)
), length
)
)
for (i in 1:length(splt)) {
if (i==1) {
typeF <- c(rep(names(splt)[i], splt[i]))
} else {
typeF <- c(typeF, rep(names(splt)[i], splt[i]))
}
}
levels(typeF) <- sTypes
typeF
