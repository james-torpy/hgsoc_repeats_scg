} else {
if (i==2) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
}
# create threshold column for FC/FDR cutoff:
if (length(FCthresh) == 0) {
sigGenes <- filter(allGenes, FDR < FDRthresh)
allGenes$threshold <- as.factor(allGenes$FDR < FDRthresh)
} else {
sigGenes <- filter(allGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
allGenes$threshold <- as.factor((allGenes$FDR < FDRthresh & allGenes$logFC < -(FCthresh))|(allGenes$FDR <  FDRthresh & allGenes$logFC > FCthresh))
}
##############################################################################
### 4. Create DE data frames for repeats:
##############################################################################
# define repeat and sig DE repeat dfs:
repGenes <- allGenes[grep("ENS",  rownames(allGenes), invert = T),]
print(repGenes)
# add 'type' identifier column:
repGenes$type <- "repeat"
sig_rep <- subset(repGenes, threshold == T)
if (!(ctlInd==1)) {
if (i==1) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==1) {
sigReps <- list(sig_rep)
} else {
sigReps[[i]] <- sig_rep
}
} else {
if (i==2) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==2) {
sigReps <- list(sig_rep)
} else {
sigReps[[i]] <- sig_rep
}
}
##############################################################################
### 5. Create DE data frames for gencode genes:
##############################################################################
gcGenes <- allGenes[grep("ENS",  rownames(allGenes)),]
# add 'type' identifier column:
gcGenes$type <- "gc"
sig_gc <- subset(allGenes, threshold == T)
if (!(ctlInd==1)) {
if (i==1) {
sig_gc_GenesList <- list(sig_gc)
} else {
sig_gc_GenesList[[i]] <- sig_gc
}
} else {
if (i==2) {
sig_gc_GenesList <- list(sig_gc)
} else {
sig_gc_GenesList[[i]] <- sig_gc
}
}
##############################################################################
### 6. Create positive and negative control genes data frame:
##############################################################################
# include the control genes for labelling:
for (j in 1:length(posGeneIDs)) {
if (j==1) {
posGenes <- allGenes[ posGeneIDs[j],]
} else {
posGenes <- rbind(posGenes, allGenes[posGeneIDs[j],])
}
}
rownames(posGenes) <- posGeneNames
for (j in 1:length(negGeneIDs)) {
if (j==1) {
negGenes <- allGenes[ negGeneIDs[j],]
} else {
negGenes <- rbind(negGenes,   allGenes[negGeneIDs[j],])
}
}
rownames(negGenes) <- negGeneNames
# set default threshold statuses for control genes:
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR< FDRthresh,])>0) {
posGenes[posGenes$FDR<  FDRthresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR< FDRthresh,])>0) {
negGenes[negGenes$FDR<  FDRthresh,]$threshold <-  "NEGSIG"
}
ctlGenes <- rbind(posGenes, negGenes)
# add 'type' identifier column:
ctlGenes$type <- "ctl"
suppressor_df$ensembl_id <- as.character(suppressor_df$ensembl_id)
suppressor_genes <- allGenes[suppressor_df$ensembl_id,]
suppressor_genes$ensembl_id <- rownames(suppressor_genes)
suppressor_genes <- merge(suppressor_df, suppressor_genes, by.x="ensembl_id", by.y="ensembl_id")
suppressor_genes$type <- "suppressor"
suppressor_genes <- subset(suppressor_genes, select=-symbol.y)
activator_df$ensembl_id <- as.character(activator_df$ensembl_id)
activator_genes <- allGenes[activator_df$ensembl_id,]
activator_genes$ensembl_id <- rownames(activator_genes)
activator_genes <- merge(activator_df, activator_genes, by.x="ensembl_id", by.y="ensembl_id")
activator_genes$type <- "activator"
activator_genes <- subset(activator_genes, select=-symbol.y)
other_genes <- rbind(suppressor_genes, activator_genes)
# combine 'threshold' and 'type' columns:
other_genes$type_thresh <- paste0(other_genes$type, "_", other_genes$threshold)
other_genes$type_thresh <- factor(other_genes$type_thresh,
levels = c("suppressor_FALSE", "activator_FALSE", "suppressor_TRUE",
"activator_TRUE"))
lab <- other_genes[other_genes$FDR < FDRthresh,]
# other_genes$type_thresh <- factor(gsub("FALSE", "TRUE", other_genes$type_thresh),
#                                   levels = c("suppressor_TRUE", "activator_TRUE"))
#lab <- other_genes
# plot on volcano plot:
p <- ggplot(data=other_genes, aes( x=logFC, y=-log10(FDR), color=type_thresh))
p <- p + geom_point(data=other_genes)
p <- p + geom_text_repel(data=lab, aes(label=symbol.x))
p <- p + theme(legend.position =  "none")
p <- p + labs(x="log2 fold change vs FT control", y="-log10 FDR")
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = c(
"gray81", "gray81",
"deepskyblue", "tomato"
))
p
dev.off()
dev.off()
dev.off()
p
lab
FDRthresh
lab$symbol.x
lab[lab$logFC<0,]
lab[lab$logFC<0,]$symbol.x
FCthres <- 0.3
FCthresh <- 0.3
comp <- paste0(sTypes[i], "_vs_", ctl)
# perform likelihood ratio test:
con[i] <- 1
lrt <- glmLRT(fit, contrast = con)
# determine the top DE genes:
topTags(lrt)
if (file.exists(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))) {
print(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds already exists,
no need to create"))
} else {
print(paste0("Creating ", newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
saveRDS(lrt, file = paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
}
# fetch summary of differentially expressed genes (those  with FDR =< 0.05:
DEs <- summary(result <- decideTestsDGE((lrt)))
# fetch all gene DE info,
allGenes <- as.data.frame(topTags(lrt, n=Inf))
# annotate allGenes with entrez ids and symbols in separate columns:
egENSEMBL <- toTable(org.Hs.egENSEMBL)
egSYMBOL <- toTable(org.Hs.egSYMBOL)
allGenes$gene_id <- egENSEMBL$gene_id[match(rownames(allGenes), egENSEMBL$ensembl_id)]
allGenes$symbol <- egSYMBOL$symbol[match(allGenes$gene_id, egSYMBOL$gene_id)]
if (!(ctlInd==1)) {
if (i==1) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
} else {
if (i==2) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
}
# create threshold column for FC/FDR cutoff:
if (length(FCthresh) == 0) {
sigGenes <- filter(allGenes, FDR < FDRthresh)
allGenes$threshold <- as.factor(allGenes$FDR < FDRthresh)
} else {
sigGenes <- filter(allGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
allGenes$threshold <- as.factor((allGenes$FDR < FDRthresh & allGenes$logFC < -(FCthresh))|(allGenes$FDR <  FDRthresh & allGenes$logFC > FCthresh))
}
##############################################################################
### 4. Create DE data frames for repeats:
##############################################################################
# define repeat and sig DE repeat dfs:
repGenes <- allGenes[grep("ENS",  rownames(allGenes), invert = T),]
print(repGenes)
# add 'type' identifier column:
repGenes$type <- "repeat"
sig_rep <- subset(repGenes, threshold == T)
if (!(ctlInd==1)) {
if (i==1) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==1) {
sigReps <- list(sig_rep)
} else {
sigReps[[i]] <- sig_rep
}
} else {
if (i==2) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==2) {
sigReps <- list(sig_rep)
} else {
sigReps[[i]] <- sig_rep
}
}
##############################################################################
### 5. Create DE data frames for gencode genes:
##############################################################################
gcGenes <- allGenes[grep("ENS",  rownames(allGenes)),]
# add 'type' identifier column:
gcGenes$type <- "gc"
sig_gc <- subset(allGenes, threshold == T)
if (!(ctlInd==1)) {
if (i==1) {
sig_gc_GenesList <- list(sig_gc)
} else {
sig_gc_GenesList[[i]] <- sig_gc
}
} else {
if (i==2) {
sig_gc_GenesList <- list(sig_gc)
} else {
sig_gc_GenesList[[i]] <- sig_gc
}
}
##############################################################################
### 6. Create positive and negative control genes data frame:
##############################################################################
# include the control genes for labelling:
for (j in 1:length(posGeneIDs)) {
if (j==1) {
posGenes <- allGenes[ posGeneIDs[j],]
} else {
posGenes <- rbind(posGenes, allGenes[posGeneIDs[j],])
}
}
rownames(posGenes) <- posGeneNames
for (j in 1:length(negGeneIDs)) {
if (j==1) {
negGenes <- allGenes[ negGeneIDs[j],]
} else {
negGenes <- rbind(negGenes,   allGenes[negGeneIDs[j],])
}
}
rownames(negGenes) <- negGeneNames
# set default threshold statuses for control genes:
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR< FDRthresh,])>0) {
posGenes[posGenes$FDR<  FDRthresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR< FDRthresh,])>0) {
negGenes[negGenes$FDR<  FDRthresh,]$threshold <-  "NEGSIG"
}
ctlGenes <- rbind(posGenes, negGenes)
# add 'type' identifier column:
ctlGenes$type <- "ctl"
suppressor_df$ensembl_id <- as.character(suppressor_df$ensembl_id)
suppressor_genes <- allGenes[suppressor_df$ensembl_id,]
suppressor_genes$ensembl_id <- rownames(suppressor_genes)
suppressor_genes <- merge(suppressor_df, suppressor_genes, by.x="ensembl_id", by.y="ensembl_id")
suppressor_genes$type <- "suppressor"
suppressor_genes <- subset(suppressor_genes, select=-symbol.y)
activator_df$ensembl_id <- as.character(activator_df$ensembl_id)
activator_genes <- allGenes[activator_df$ensembl_id,]
activator_genes$ensembl_id <- rownames(activator_genes)
activator_genes <- merge(activator_df, activator_genes, by.x="ensembl_id", by.y="ensembl_id")
activator_genes$type <- "activator"
activator_genes <- subset(activator_genes, select=-symbol.y)
other_genes <- rbind(suppressor_genes, activator_genes)
# combine 'threshold' and 'type' columns:
other_genes$type_thresh <- paste0(other_genes$type, "_", other_genes$threshold)
other_genes$type_thresh <- factor(other_genes$type_thresh,
levels = c("suppressor_FALSE", "activator_FALSE", "suppressor_TRUE",
"activator_TRUE"))
lab <- other_genes[other_genes$FDR < FDRthresh,]
# other_genes$type_thresh <- factor(gsub("FALSE", "TRUE", other_genes$type_thresh),
#                                   levels = c("suppressor_TRUE", "activator_TRUE"))
#lab <- other_genes
# plot on volcano plot:
p <- ggplot(data=other_genes, aes( x=logFC, y=-log10(FDR), color=type_thresh))
p <- p + geom_point(data=other_genes)
p <- p + geom_text_repel(data=lab, aes(label=symbol.x))
p <- p + theme(legend.position =  "none")
p <- p + labs(x="log2 fold change vs FT control", y="-log10 FDR")
# key for colours = c("neg_ctls", "pos_ctls", "neg_gc", "pos_gc")
#          p <- p + scale_colour_manual(values = c("#114477", "firebrick4",
#            "dodgerblue1", "firebrick1"))
p <- p + scale_colour_manual(values = c(
"gray81", "gray81",
"deepskyblue", "tomato"
))
lab
lab[lab$logFC < 0,]
lab[lab$logFC < 0,]$symbol.x
as.character(lab[lab$logFC < 0,]$symbol.x)
as.character(lab[lab$logFC < 0|lab$FDR < 0.1,]$symbol.x)
temp <- as.character(lab[lab$logFC < 0,]$symbol.x)
temp[temp$FDR < 0.1]
temp <- lab[lab$logFC < 0,]
temp[temp$FDR < 0.1]
temp[temp$FDR < 0.1,]
temp[temp$FDR < 0.1,]$symbol.x
FDRthresh
FDRthresh <- 0.3
comp <- paste0(sTypes[i], "_vs_", ctl)
# perform likelihood ratio test:
con[i] <- 1
lrt <- glmLRT(fit, contrast = con)
# determine the top DE genes:
topTags(lrt)
if (file.exists(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))) {
print(paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds already exists,
no need to create"))
} else {
print(paste0("Creating ", newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
saveRDS(lrt, file = paste0(newRobjectDir, sTypes[i], "_vs_", ctl, "_lrt.rds"))
}
# fetch summary of differentially expressed genes (those  with FDR =< 0.05:
DEs <- summary(result <- decideTestsDGE((lrt)))
# fetch all gene DE info,
allGenes <- as.data.frame(topTags(lrt, n=Inf))
# annotate allGenes with entrez ids and symbols in separate columns:
egENSEMBL <- toTable(org.Hs.egENSEMBL)
egSYMBOL <- toTable(org.Hs.egSYMBOL)
allGenes$gene_id <- egENSEMBL$gene_id[match(rownames(allGenes), egENSEMBL$ensembl_id)]
allGenes$symbol <- egSYMBOL$symbol[match(allGenes$gene_id, egSYMBOL$gene_id)]
if (!(ctlInd==1)) {
if (i==1) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
} else {
if (i==2) {
allGenesList <- list(allGenes)
} else {
allGenesList[[i]] <- allGenes
}
}
# create threshold column for FC/FDR cutoff:
if (length(FCthresh) == 0) {
sigGenes <- filter(allGenes, FDR < FDRthresh)
allGenes$threshold <- as.factor(allGenes$FDR < FDRthresh)
} else {
sigGenes <- filter(allGenes, (FDR < FDRthresh & logFC < -(FCthresh))|(FDR < FDRthresh & logFC > FCthresh))
allGenes$threshold <- as.factor((allGenes$FDR < FDRthresh & allGenes$logFC < -(FCthresh))|(allGenes$FDR <  FDRthresh & allGenes$logFC > FCthresh))
}
##############################################################################
### 4. Create DE data frames for repeats:
##############################################################################
# define repeat and sig DE repeat dfs:
repGenes <- allGenes[grep("ENS",  rownames(allGenes), invert = T),]
print(repGenes)
# add 'type' identifier column:
repGenes$type <- "repeat"
sig_rep <- subset(repGenes, threshold == T)
if (!(ctlInd==1)) {
if (i==1) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==1) {
sigReps <- list(sig_rep)
} else {
sigReps[[i]] <- sig_rep
}
} else {
if (i==2) {
allReps <- list(repGenes)
} else {
allReps[[i]] <- repGenes
}
if (i==2) {
sigReps <- list(sig_rep)
} else {
sigReps[[i]] <- sig_rep
}
}
##############################################################################
### 5. Create DE data frames for gencode genes:
##############################################################################
gcGenes <- allGenes[grep("ENS",  rownames(allGenes)),]
# add 'type' identifier column:
gcGenes$type <- "gc"
sig_gc <- subset(allGenes, threshold == T)
if (!(ctlInd==1)) {
if (i==1) {
sig_gc_GenesList <- list(sig_gc)
} else {
sig_gc_GenesList[[i]] <- sig_gc
}
} else {
if (i==2) {
sig_gc_GenesList <- list(sig_gc)
} else {
sig_gc_GenesList[[i]] <- sig_gc
}
}
##############################################################################
### 6. Create positive and negative control genes data frame:
##############################################################################
# include the control genes for labelling:
for (j in 1:length(posGeneIDs)) {
if (j==1) {
posGenes <- allGenes[ posGeneIDs[j],]
} else {
posGenes <- rbind(posGenes, allGenes[posGeneIDs[j],])
}
}
rownames(posGenes) <- posGeneNames
for (j in 1:length(negGeneIDs)) {
if (j==1) {
negGenes <- allGenes[ negGeneIDs[j],]
} else {
negGenes <- rbind(negGenes,   allGenes[negGeneIDs[j],])
}
}
rownames(negGenes) <- negGeneNames
# set default threshold statuses for control genes:
posGenes$threshold <- "POSITIVE"
if (nrow(posGenes[posGenes$FDR< FDRthresh,])>0) {
posGenes[posGenes$FDR<  FDRthresh,]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (nrow(negGenes[negGenes$FDR< FDRthresh,])>0) {
negGenes[negGenes$FDR<  FDRthresh,]$threshold <-  "NEGSIG"
}
ctlGenes <- rbind(posGenes, negGenes)
# add 'type' identifier column:
ctlGenes$type <- "ctl"
suppressor_df$ensembl_id <- as.character(suppressor_df$ensembl_id)
suppressor_genes <- allGenes[suppressor_df$ensembl_id,]
suppressor_genes$ensembl_id <- rownames(suppressor_genes)
suppressor_genes <- merge(suppressor_df, suppressor_genes, by.x="ensembl_id", by.y="ensembl_id")
suppressor_genes$type <- "suppressor"
suppressor_genes <- subset(suppressor_genes, select=-symbol.y)
activator_df$ensembl_id <- as.character(activator_df$ensembl_id)
activator_genes <- allGenes[activator_df$ensembl_id,]
activator_genes$ensembl_id <- rownames(activator_genes)
activator_genes <- merge(activator_df, activator_genes, by.x="ensembl_id", by.y="ensembl_id")
activator_genes$type <- "activator"
activator_genes <- subset(activator_genes, select=-symbol.y)
other_genes <- rbind(suppressor_genes, activator_genes)
# combine 'threshold' and 'type' columns:
other_genes$type_thresh <- paste0(other_genes$type, "_", other_genes$threshold)
other_genes$type_thresh <- factor(other_genes$type_thresh,
levels = c("suppressor_FALSE", "activator_FALSE", "suppressor_TRUE",
"activator_TRUE"))
lab <- other_genes[other_genes$FDR < FDRthresh,]
lab
temp <- lab[lab$logFC < 0,]
temp
temp$symbol.x
temp[temp$FDR > 0.1,]$symbol.x
temp <- lab[lab$logFC > 0,]
temp
temp$symbol.x
temp <- temp[temp$FDR > 0.1,]
temp
temp <- lab[lab$logFC > 0,]
temp <- temp[temp$FDR < 0.1,]
temp$symbol.x
temp <- lab[lab$logFC > 0,]
temp <- temp[temp$FDR > 0.1,]
temp
temp$symbol.x
temp <- lab[lab$logFC > 0,]
temp
temp <- temp[grep("suppressor", temp$type_thresh),]
temp
temp$symbol.x
fdr0.1 <- temp[temp$FDR < 0.1,]
fdr0.1
fdr0.1$symbol.x
fdr0.3 <- temp[temp$FDR > 0.1,]
fdr0.3
fdr0.3$symbol.x
temp <- lab[lab$logFC < 0,]
temp <- temp[grep("activator", temp$type_thresh),]
temp
temp$symbol.x
suppressor_df
suppressor_df$symbol
temp <- lab[lab$logFC > 0,]
temp[temp$FDR < 0.1]
temp[temp$FDR < 0.1,]
temp[temp$FDR < 0.1,]$symbol.x
temp[temp$FDR > 0.1,]$symbol.x
temp_act <- c("TAZ", "NPRL3", "CCDC130", "ZFHX2", "SAFB", "RNASEH2C", "RBM10", "CDK10", "C17ORF70", "FANCA", "CPSF7")
temp_act %in% suppressor_df$symbol
suppressor_df$symbol
temp_act %in% as.character(suppressor_df$symbol)
as.character(suppressor_df$symbol)
temp_act
