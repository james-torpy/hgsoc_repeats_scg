pdf(paste0(plotDir, "salmon_vs_TEtranscripts_DE.pdf"))
print(salmon_vs_TEtranscripts[[1]])
dev.off()
htseq_vs_salmon[[1]]
head(df)
x <- all_reps[[1]]
y <- all_reps[[2]]
df <- merge(x, y, by="row.names")
rownames(df) <- df$Row.names
df <- df[,-1]
df$sig <- NA
df$sig[df$FDR_or_padj.x > 0.1 & df$FDR_or_padj.y > 0.1] <- "non-significant"
df$sig[df$FDR_or_padj.x < 0.1 & df$FDR_or_padj.y > 0.1] <- "x_significant"
df$sig[df$FDR_or_padj.x > 0.1 & df$FDR_or_padj.y < 0.1] <- "y-significant"
df$sig[df$FDR_or_padj.x < 0.1 & df$FDR_or_padj.y < 0.1] <- "both-significant"
df$sig <- factor(df$sig, levels = c("non-significant", "x_significant",
"y-significant", "both-significant"))
head(df)
logFC <- df[,grep("logFC", colnames(df))]
corr <- cor(logFC, method="spearman")
head(logFC)
reg_line <- logFC[grep("both", df$sig, invert=T),]
reg_line
rownames(reg_line)
logFC[rownames(logFC) %in% reg_line]
logFC[rownames(logFC) %in% reg_line,]
rownames(logFC)
logFC[rownames(logFC) %in% rownames(reg_line),]
df[rownames(df) %in% rownames(reg_line),]
reg_line <- logFC[grep("non", df$sig, invert=T),]
df[rownames(df) %in% rownames(reg_line),]
p <- p + geom_smooth(method = lm, formula=reg_line$logFC.y~reg_line$logFC.x)
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + geom_smooth(method = lm, formula=reg_line$logFC.y~reg_line$logFC.x)
p
reg_line$logFC.y
reg_line$logFC.x
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + geom_smooth(method = lm)
p
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + geom_smooth(method = lm, se = F)
p
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + geom_smooth(method = lm, formula=y~x, se = F)
p
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + geom_smooth(method = lm, formula=logFC.y~logFC.x, se = F)
p
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + geom_smooth(method = "lm", formula=logFC.y~logFC.x, se = F)
p
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + geom_smooth(method = "lm", formula=df$logFC.y~df$logFC.x, se = F)
p
fit1 <- lm(reg_line$logFC.y~reg_line$logFC.x)
summary(fit)
summary(fit1)
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + stat_smooth(method = "lm", col = "black")
p
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + stat_smooth(method = "lm", col = "black", se = F)
p
?stat_smooth
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + stat_smooth(method = "lm", col = "black", se = F, size=5)
p
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + stat_smooth(method = "lm", col = "black", se = F, size=0.5)
p
plot_corr <- function(x, y) {
df <- merge(x, y, by="row.names")
rownames(df) <- df$Row.names
df <- df[,-1]
df$sig <- NA
df$sig[df$FDR_or_padj.x > 0.1 & df$FDR_or_padj.y > 0.1] <- "non-significant"
df$sig[df$FDR_or_padj.x < 0.1 & df$FDR_or_padj.y > 0.1] <- "x_significant"
df$sig[df$FDR_or_padj.x > 0.1 & df$FDR_or_padj.y < 0.1] <- "y-significant"
df$sig[df$FDR_or_padj.x < 0.1 & df$FDR_or_padj.y < 0.1] <- "both-significant"
df$sig <- factor(df$sig, levels = c("non-significant", "x_significant",
"y-significant", "both-significant"))
logFC <- df[,grep("logFC", colnames(df))]
corr <- cor(logFC, method="spearman")
# fit linear model to x and y data for regression line:
reg_line <- logFC[grep("non", df$sig, invert=T),]
fit1 <- lm(reg_line$logFC.y~reg_line$logFC.x)
p <- ggplot(df, aes(logFC.x, logFC.y, colour = sig))
p <- p + geom_point()
p <- p + scale_colour_manual(values = c("grey", brewer.pal(3,"Paired")[3],
"gold1", "blueviolet"))
p <- p + annotate("text", x=0, y=2.5, parse=TRUE,
label=paste0("Spearman",
as.character(round(corr[1,2], 3))))
p <- p + stat_smooth(method = "lm", col = "black", se = F, size=0.5)
return(list(p, df))
}
par(mar=c(2,2,2,2))
htseq_vs_salmon <- plot_corr(all_reps[[1]], all_reps[[2]])
pdf(paste0(plotDir, "htseq_vs_salmon_repeat_DE.pdf"))
print(htseq_vs_salmon[[1]])
dev.off()
htseq_vs_TEtranscripts <- plot_corr(all_reps[[1]], all_reps[[3]])
pdf(paste0(plotDir, "htseq_vs_TEtranscripts_DE.pdf"))
print(htseq_vs_TEtranscripts[[1]])
dev.off()
salmon_vs_TEtranscripts <- plot_corr(all_reps[[1]], all_reps[[3]])
pdf(paste0(plotDir, "salmon_vs_TEtranscripts_DE.pdf"))
print(salmon_vs_TEtranscripts[[1]])
dev.off()
library(tibble)
library(dplyr)
library(RColorBrewer)
library(RUVSeq)
library(ggplot2)
library(ggrepel)
library(preprocessCore)
library(pheatmap)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/", expName, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/")
system(paste0("mkdir -p ", plotDir))
### 1. Load in all counts and subset for genes of interest ###
Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds"))
# remove pAF sample:
rownames(Counts) <- Counts$gene_id
Counts <- subset(Counts, select=-c(AOCS_093_pAF, gene_id))
STypes <- unique(
grep(
"id", gsub(
"^.*\\_", "", colnames(Counts)
), value=T, invert = T
)
)
# define repeat species of heatmap as those with FDR<0.05 and FC>1 in any sample comparison with controls
sigReps <- readRDS(file=paste0(RobjectDir, "/", Type, "_DEsigReps.rds"))
#sigReps <- c("(CATTC)n", "Helitron1Na_Mam", "Helitron1Nb_Mam", "L1HS", "L1MD3", "L1P2", "L1P4d", "L1PA2",
#             "AluYi6", "GSATX", "GSAT","HSATII", "HSAT4", "HSAT5", "ACRO1", "FAM", "REP522", "CER", "SATR2")
sigRepNames <- rownames(sigReps[[1]])
Counts <- Counts[sigRepNames,]
### 2. Calculate CPMRs ###
# calculate total repeat count size:
rSizes <- apply(Counts, 2, sum)
# calculate CPMRs
CPMR <- as.data.frame(t(t(Counts)/rSizes)*1000000)
sigReps <- readRDS(file="/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/Robjects/exp9/custom3_DEsigReps.rds")
sigReps <- readRDS(file="/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/Robjects/exp9/htseq_EdgeR_primary_HGSOC_vs_FT_with_chromatin_remodellers/custom3_DEsigReps.rds")
list.files("/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/Robjects/exp9/htseq_EdgeR_primary_HGSOC_vs_FT_with_chromatin_remodellers/")
readRDS("/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/Robjects/exp9/htseq_EdgeR_primary_HGSOC_vs_FT_with_chromatin_remodellers/custom3_DEsigReps.rds")
# define repeat species of heatmap as those with FDR<0.05 and FC>1 in any sample comparison with controls
sigReps <- read.table(paste0("/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/results/R/exp9/plots/DEplots/htseq_EdgeR_primary_HGSOC_vs_FT/sig_rep_list.txt"))
sigReps
# define repeat species of heatmap as those with FDR<0.05 and FC>1 in any sample comparison with controls
sigReps <- read.table(paste0("/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/results/R/exp9/plots/DEplots/htseq_EdgeR_primary_HGSOC_vs_FT/sig_rep_list.txt"))[,1]
# define repeat species of heatmap as those with FDR<0.05 and FC>1 in any sample comparison with controls
sigRepNames <- read.table(paste0("/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/results/R/exp9/plots/DEplots/htseq_EdgeR_primary_HGSOC_vs_FT/sig_rep_list.txt"))[,1]
#sigReps <- readRDS(file=paste0(RobjectDir, "/", Type, "_DEsigReps.rds"))
#sigReps <- c("(CATTC)n", "Helitron1Na_Mam", "Helitron1Nb_Mam", "L1HS", "L1MD3", "L1P2", "L1P4d", "L1PA2",
#             "AluYi6", "GSATX", "GSAT","HSATII", "HSAT4", "HSAT5", "ACRO1", "FAM", "REP522", "CER", "SATR2")
#sigRepNames <- rownames(sigReps[[1]])
Counts <- Counts[sigRepNames,]
Counts
rownames(Counts)
sigRepNames
# define repeat species of heatmap as those with FDR<0.05 and FC>1 in any sample comparison with controls
sigRepNames <- as.character(read.table(paste0("/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/results/R/exp9/plots/DEplots/htseq_EdgeR_primary_HGSOC_vs_FT/sig_rep_list.txt"))[,1])
#sigReps <- readRDS(file=paste0(RobjectDir, "/", Type, "_DEsigReps.rds"))
#sigReps <- c("(CATTC)n", "Helitron1Na_Mam", "Helitron1Nb_Mam", "L1HS", "L1MD3", "L1P2", "L1P4d", "L1PA2",
#             "AluYi6", "GSATX", "GSAT","HSATII", "HSAT4", "HSAT5", "ACRO1", "FAM", "REP522", "CER", "SATR2")
#sigRepNames <- rownames(sigReps[[1]])
Counts <- Counts[sigRepNames,]
sigRepNames
rownames(Counts)
sigRepNames
Counts
Counts <- subset(Counts, select=-c(AOCS_093_pAF, gene_id))
rm(list=ls())
# load packages needed:
library(tibble)
library(dplyr)
library(RColorBrewer)
library(RUVSeq)
library(ggplot2)
library(ggrepel)
library(preprocessCore)
library(pheatmap)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/", expName, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/")
system(paste0("mkdir -p ", plotDir))
### 1. Load in all counts and subset for genes of interest ###
Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds"))
# remove pAF sample:
rownames(Counts) <- Counts$gene_id
Counts <- subset(Counts, select=-c(AOCS_093_pAF, gene_id))
STypes <- unique(
grep(
"id", gsub(
"^.*\\_", "", colnames(Counts)
), value=T, invert = T
)
)
head(Counts)
# define repeat species of heatmap as those with FDR<0.05 and FC>1 in any sample comparison with controls
sigRepNames <- as.character(read.table(paste0("/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/results/R/exp9/plots/DEplots/htseq_EdgeR_primary_HGSOC_vs_FT/sig_rep_list.txt"))[,1])
#sigReps <- readRDS(file=paste0(RobjectDir, "/", Type, "_DEsigReps.rds"))
#sigReps <- c("(CATTC)n", "Helitron1Na_Mam", "Helitron1Nb_Mam", "L1HS", "L1MD3", "L1P2", "L1P4d", "L1PA2",
#             "AluYi6", "GSATX", "GSAT","HSATII", "HSAT4", "HSAT5", "ACRO1", "FAM", "REP522", "CER", "SATR2")
#sigRepNames <- rownames(sigReps[[1]])
Counts <- Counts[sigRepNames,]
roanems(Counts)
rownames(Counts)
Counts
d packages needed:
library(tibble)
library(dplyr)
library(RColorBrewer)
library(RUVSeq)
library(ggplot2)
library(ggrepel)
library(preprocessCore)
library(pheatmap)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/", expName, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/")
system(paste0("mkdir -p ", plotDir))
### 1. Load in all counts and subset for genes of interest ###
Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds"))
# remove pAF sample:
rownames(Counts) <- Counts$gene_id
Counts <- subset(Counts, select=-c(AOCS_093_pAF, gene_id))
STypes <- unique(
grep(
"id", gsub(
"^.*\\_", "", colnames(Counts)
), value=T, invert = T
)
)
rSizes <- apply(Counts, 2, sum)
# calculate CPMRs
CPMR <- as.data.frame(t(t(Counts)/rSizes)*1000000)
# log CPMRs:
logCPMR = log10(CPMR+1)
head(CPMR)
tail(CPMR)
Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds"))
tail(Counts)
head(Counts)
# load packages needed:
library(tibble)
library(dplyr)
library(RColorBrewer)
library(RUVSeq)
library(ggplot2)
library(ggrepel)
library(preprocessCore)
library(edgeR)
library(org.Hs.eg.db)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp9"
Type <- "custom3"
################################################################################
### Options ###
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_vs_FT ###
sTypes <- c("FT", "HGSOC")
sGroups <- list("FT", c("prPT", "rfPT", "arPT", "mrPT", "erPT"))
names(sGroups) <- sTypes
descrip <- "htseq_EdgeR_primary_HGSOC_vs_FT_with_chromatin_remodellers"
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_CCNEamp_vs_HRD ###
#sTypes <- c("bothDrivers", "FT", "HRD", "CCNEamp", "unknown_driver")
#descrip <- "htseq_EdgeR_primary_HGSOC_CCNEamp_vs_HRD"
################################################################################
################################################################################
### htseq_EdgeR_HGSOC_drug_cats_vs_FT ###
#sTypes <- c("FT", "primary_resistant", "acquired_resistant", "drug_responders",
#  "recurrent_ascites", "metastatic")
#sGroups <- list("FT", "prPT", "rfPT", "arPT", "mrPT", "erPT", "rcAF", "msST")
#names(sGroups) <- sTypes
#descrip <- "htseq_EdgeR_HGSOC_drug_cats_vs_FT"
################################################################################
################################################################################
### SalmonTE_primary_HGSOC_CCNEamp_vs_HRD ###
#sTypes <- c("bothDrivers", "FT", "HRD", "CCNEamp", "unknown_driver")
#descrip <- "SalmonTE_primary_HGSOC_CCNEamp_vs_HRD"
################################################################################
################################################################################
### htseq_EdgeR_primary_HGSOC_vs_FT_with_LINE1_silencers ###
#sTypes <- c("FT", "HGSOC")
#sGroups <- list("FT", c("prPT", "rfPT", "arPT", "mrPT", "erPT"))
#names(sGroups) <- sTypes
#descrip <- "htseq_EdgeR_primary_HGSOC_vs_FT_with_LINE1_silencers"
################################################################################
# define comparison parameters:
primaryOnly <- TRUE
cat_by_driver <- FALSE
EDAnormalise <- FALSE
count_tool <- "EdgeR"
customSamples <- FALSE
# define custom samples if needed:
#cus <- c("")
# specify what combination of repeat genes (repeats) and other genes,
# (all, both, other) should contribute to the results:
resultTypes <- c("repeats", "other")
# define sample group to use as control:
ctl <- "FT"
# specify what FDR and log2 fold change thresholds to use:
FDRthresh <- 0.1
FCthresh <- 0
# specify control genes to include:
posGeneIDs <- c("ENSG00000111640", "ENSG00000196776")
posGeneNames <- c("GAPDH", "CD47")
negGeneIDs <- c("ENSG00000075624", "ENSG00000169919")
negGeneNames <- c("beta-actin", "GUSB")
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "/projects/", project)
refDir <- paste0(projectDir, "/refs/")
rawDir <- paste0(projectDir,
"/RNA-seq/raw_files/fullsamples/bowtell_primary/")
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/")
newRobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/",
expName, "/", descrip, "/")
plotDir <- paste0(resultsDir, "/R/", expName,
"/plots/DEplots/", descrip, "/")
system(paste0("mkdir -p ", plotDir))
system(paste0("mkdir -p ", newRobjectDir))
# specify other genes to include if necessary:
other_df <- read.csv(paste0(refDir, "/chromatin_remodellers.csv"), header=T)
otherIDs <- other_df$ensembl_id
otherSym <- other_df$symbol
################################################################################
### 1. Load in all counts ###
################################################################################
# define functions for this section:
counts_bind <- function(counts1, counts2) {
# append counts1 to counts2:
counts_all <- rbind(custom3Counts, gcCounts)
# make rownames gene_id, get rid of latter column and change
# storage mode from factor to integer:
rownames(counts_all) <- counts_all$gene_id
return(subset(counts_all, select=-gene_id))
}
if ( count_tool=="EdgeR" ) {
if ( !file.exists(paste0(RobjectDir, "/", Type, "_", count_tool,
"_counts.rds")) ) {
writeLines("\n")
print("EdgeR counts data frame does not exist, creating now...")
custom3Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_allcounts.htseq.rds"))
gcCounts <- readRDS(paste0(RobjectDir, "/gc_allcounts.htseq.rds"))
# append gcCounts to custom3Counts:
Counts <- counts_bind(custom3Counts, gcCounts)
saveRDS(Counts, paste0(RobjectDir, "/", Type, "_", count_tool,
"_counts.rds"))
} else {
print("Loading EdgeR counts data frame...")
Counts <- readRDS(paste0(RobjectDir, "/", Type, "_", count_tool,
"_counts.rds"))
}
} else if ( count_tool=="SalmonTE" ) {
if ( !file.exists(paste0(RobjectDir, "/", Type,
"_", count_tool, "_counts.rds")) ) {
writeLines("\n")
print("SalmonTE counts data frame does not exist, creating now...")
custom3Counts <- readRDS(paste0(RobjectDir, "/", Type,
"_counts.SalmonTE.rds"))
gcCounts <- readRDS(paste0(RobjectDir, "/gc_counts.Salmon.rds"))
# append gcCounts to custom3Counts:
Counts <- counts_bind(custom3Counts, gcCounts)
saveRDS(Counts, (paste0(RobjectDir, "/", Type, "SalmonTE_counts.rds")))
} else {
print("Loading SalmonTE counts data frame...")
Counts <- readRDS(file=paste0(RobjectDir, "/", Type,
"SalmonTE_counts.rds"))
}
}
head(Counts)
tail(Counts)
rSizes <- apply(Counts, 2, sum)
# calculate CPMRs
CPMR <- as.data.frame(t(t(Counts)/rSizes)*1000000)
# log CPMRs:
logCPMR = log10(CPMR+1)
head(CPMR)
tail(CPMR)
CPMR_means <- apply(CPMR, 1, mean)
CPMR_means
CPMR_means <- apply(CPMR, 1, mean)
CPMR_means <- data.frame(CPMR_means)
head(CPMR_means)
CPMR_means <- CPMR_means[order(CPMR_means[,1]),]
head(CPMR_means)
CPMR_means <- apply(CPMR, 1, mean)
head(order(CPMR_means))
CPMR_ordered <- CPMR_means[order(CPMR_means))]
CPMR_ordered <- CPMR_means[order(CPMR_means)]
head(CPMR_ordered)
CPMR_ordered <- CPMR_means[order(CPMR_means, decreasing = T)]
head(CPMR_ordered)
top_CPMR <- head(CPMR_ordered, 50)
CPMR_no_zero <- CPMR_means[CPMR_means != 0]
length(CPMR_means)
length(CPMR_no_zero)
bottom_CPMR <- tail(CPMR_no_zero, 50)
bottom_CPMR
top_CPMR
save.image("/Users/jamestorpy/clusterHome/projects/hgsoc_repeats/RNA-seq/Robjects/top_bottom_CPMR_temp.Rdata")
