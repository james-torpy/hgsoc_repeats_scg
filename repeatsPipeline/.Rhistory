#Plots[[i]] <- p + scale_fill_manual(values = c("#00BF7D", "#E76BF3", "#A3A500", "#F8766D", "#00B0F6"))
Plots[[i]] <- p + scale_fill_manual(values = c("#AA4499", "#F8766D", "#00BF7D", "#DDCC77", "#F8766D"))
i=i+1
}
Plots[[1]]
for (i in 1:2) {
pCounts <- melt(cDFs[i], variable.name = "sample")
pCounts$gene_type <- factor(pCounts$gene_type, levels = c("non_coding", "ribosome", "other", "repeats", "protein_coding"))
# plot data as barplot:
p <- ggplot(pCounts, aes(x=sample, y=value))
p <- p + geom_bar(stat="identity", aes(fill=gene_type))
p <- p + theme(text = element_text(size=20), axis.text.x = element_text(angle = 90))
#Plots[[i]] <- p + scale_fill_manual(values = c("#00BF7D", "#E76BF3", "#A3A500", "#F8766D", "#00B0F6"))
Plots[[i]] <- p + scale_fill_manual(values = c("#AA4499", "#F8766D", "#00B0F6", "#DDCC77", "#F8766D"))
i=i+1
}
Plots[[1]]
for (i in 1:2) {
pCounts <- melt(cDFs[i], variable.name = "sample")
pCounts$gene_type <- factor(pCounts$gene_type, levels = c("non_coding", "ribosome", "other", "repeats", "protein_coding"))
# plot data as barplot:
p <- ggplot(pCounts, aes(x=sample, y=value))
p <- p + geom_bar(stat="identity", aes(fill=gene_type))
p <- p + theme(text = element_text(size=20), axis.text.x = element_text(angle = 90))
#Plots[[i]] <- p + scale_fill_manual(values = c("#00BF7D", "#E76BF3", "#A3A500", "#F8766D", "#00B0F6"))
Plots[[i]] <- p + scale_fill_manual(values = c("#AA4499", "#00BF7D", "#00B0F6", "#DDCC77", "#F8766D"))
i=i+1
}
Plots[[1]]
Plots[[2]]
for (i in 1:2) {
pCounts <- melt(cDFs[i], variable.name = "sample")
pCounts$gene_type <- factor(pCounts$gene_type, levels = c("non_coding", "ribosome", "other", "repeats", "protein_coding"))
# plot data as barplot:
p <- ggplot(pCounts, aes(x=sample, y=value))
p <- p + geom_bar(stat="identity", aes(fill=gene_type))
p <- p + theme(text = element_text(size=20), axis.text.x = element_text(angle = 90))
#Plots[[i]] <- p + scale_fill_manual(values = c("#00BF7D", "#E76BF3", "#A3A500", "#F8766D", "#00B0F6"))
Plots[[i]] <- p + scale_fill_manual(values = c("#00BF7D", "#AA4499", "#00B0F6", "#DDCC77", "#F8766D"))
i=i+1
}
Plots[[2]]
pdf(file = paste0(plotDir, "compBarplotCounts.pdf"), height=20, width=35)
Plots[[1]]
dev.off()
pdf(file = paste0(plotDir, "compBarplotPercent.pdf"), height=20, width=35)
Plots[[2]]
dev.off()
for (i in 1:2) {
pCounts <- melt(cDFs[i], variable.name = "sample")
pCounts$gene_type <- factor(pCounts$gene_type, levels = c("non_coding", "ribosome", "other", "repeats", "protein_coding"))
# plot data as barplot:
p <- ggplot(pCounts, aes(x=sample, y=value))
p <- p + geom_bar(stat="identity", aes(fill=gene_type))
p <- p + theme(text = element_text(size=20), axis.text.x = element_text(angle = 90))
#Plots[[i]] <- p + scale_fill_manual(values = c("#00BF7D", "#AA4499", "#00B0F6", "#DDCC77", "#F8766D"))
i=i+1
}
Plots[[2]]
for (i in 1:2) {
pCounts <- melt(cDFs[i], variable.name = "sample")
pCounts$gene_type <- factor(pCounts$gene_type, levels = c("non_coding", "ribosome", "other", "repeats", "protein_coding"))
# plot data as barplot:
p <- ggplot(pCounts, aes(x=sample, y=value))
p <- p + geom_bar(stat="identity", aes(fill=gene_type))
p <- p + theme(text = element_text(size=20), axis.text.x = element_text(angle = 90))
#Plots[[i]] <- p + scale_fill_manual(values = c("#00BF7D", "#AA4499", "#00B0F6", "#DDCC77", "#F8766D"))
i=i+1
}
Plots[[2]]
rm(list=ls())
# load packages needed:
library(GenomicRanges)
library(ShortRead)
library("BSgenome.Hsapiens.UCSC.hg38")
library(reshape2)
library(ggplot2)
library(RColorBrewer)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp1"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "projects/", project, "/")
RobjectDir <- paste0(projectDir, "RNA-seq/Robjects/")
resultsDir <- paste0(projectDir, "/RNA-seq/results")
plotDir <- paste0(resultsDir, "/R/", expName, "/plots/compBarplot/")
# create plotDir:
system(paste0("mkdir -p ", plotDir))
print(paste0("The outDir is: ", plotDir))
### 1. Load in counts lists for each sample ###
allCounts <- grep("subset", list.files(paste0(RobjectDir, "/", expName, "/compCounts"), pattern="_compCounts.rds"), value=T, invert=T)
for (i in 1:length(allCounts)) {
sampleName <- gsub("_compCounts.rds", "", allCounts[i])
if (i==1) {
Counts <- list(readRDS(file=paste0(RobjectDir, expName, "/compCounts/", allCounts[i])))
names(Counts)[i] <- sampleName
} else {
Counts[[i]] <- readRDS(file=paste0(RobjectDir, expName, "/compCounts/", allCounts[i]))
names(Counts)[i] <- sampleName
}
}
### 2. Create barplot ###
# convert Counts to a dataframe, convert each individual value from a list to an integer:
countsDF <- as.data.frame(sapply(as.data.frame(do.call("cbind", Counts)), unlist))
# add rownames as column and melt dataframe:
countsDF$gene_type <- rownames(countsDF)
# calculate percentages as new data frame:
perCountsDF <- as.data.frame(apply(countsDF[,1:ncol(countsDF)-1], 2, function(x) {
return(as.integer(x)/as.integer(sum(x))*100)
}))
perCountsDF$gene_type <- countsDF$gene_type
# create composition barplots of CountsDF and perCountsDF:
cDFs <- list(countsDF, perCountsDF)
Plots <- list()
for (i in 1:2) {
pCounts <- melt(cDFs[i], variable.name = "sample")
pCounts$gene_type <- factor(pCounts$gene_type, levels = c("non_coding", "ribosome", "other", "repeats", "protein_coding"))
# plot data as barplot:
p <- ggplot(pCounts, aes(x=sample, y=value))
p <- p + geom_bar(stat="identity", aes(fill=gene_type))
p <- p + theme(text = element_text(size=20), axis.text.x = element_text(angle = 90))
#Plots[[i]] <- p + scale_fill_manual(values = c("#00BF7D", "#AA4499", "#00B0F6", "#DDCC77", "#F8766D"))
i=i+1
}
pdf(file = paste0(plotDir, "compBarplotPercent_80sweater.pdf"), height=20, width=35)
Plots[[2]]
dev.off()
for (i in 1:2) {
pCounts <- melt(cDFs[i], variable.name = "sample")
pCounts$gene_type <- factor(pCounts$gene_type, levels = c("non_coding", "ribosome", "other", "repeats", "protein_coding"))
# plot data as barplot:
p <- ggplot(pCounts, aes(x=sample, y=value))
p <- p + geom_bar(stat="identity", aes(fill=gene_type))
p <- p + theme(text = element_text(size=20), axis.text.x = element_text(angle = 90))
#Plots[[i]] <- p + scale_fill_manual(values = c("#00BF7D", "#AA4499", "#00B0F6", "#DDCC77", "#F8766D"))
i=i+1
}
pdf(file = paste0(plotDir, "compBarplotPercent_80sweater.pdf"), height=20, width=35)
Plots[[2]]
dev.off()
library(GenomicRanges)
library(ShortRead)
library("BSgenome.Hsapiens.UCSC.hg38")
library(reshape2)
library(ggplot2)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp2"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "projects/", project, "/")
RobjectDir <- paste0(projectDir, "RNA-seq/Robjects/")
resultsDir <- paste0(projectDir, "/RNA-seq/results")
plotDir <- paste0(resultsDir, "/R/", expName, "/plots/compBarplot/")
# create plotDir:
system(paste0("mkdir -p ", plotDir))
print(paste0("The outDir is: ", plotDir))
### 1. Load in counts lists for each sample ###
allCounts <- grep("subset", list.files(paste0(RobjectDir, "/", expName, "/compCounts"), pattern="_compCounts.rds"), value=T, invert=T)
for (i in 1:length(allCounts)) {
sampleName <- gsub("_compCounts.rds", "", allCounts[i])
if (i==1) {
Counts <- list(readRDS(file=paste0(RobjectDir, expName, "/compCounts/", allCounts[i])))
names(Counts)[i] <- sampleName
} else {
Counts[[i]] <- readRDS(file=paste0(RobjectDir, expName, "/compCounts/", allCounts[i]))
names(Counts)[i] <- sampleName
}
}
### 2. Create barplot ###
# convert Counts to a dataframe, convert each individual value from a list to an integer:
countsDF <- as.data.frame(sapply(as.data.frame(do.call("cbind", Counts)), unlist))
# add rownames as column and melt dataframe:
countsDF$gene_type <- rownames(countsDF)
# calculate percentages as new data frame:
perCountsDF <- as.data.frame(apply(countsDF[,1:ncol(countsDF)-1], 2, function(x) {
return(as.integer(x)/as.integer(sum(x))*100)
}))
perCountsDF$gene_type <- countsDF$gene_type
# create composition barplots of CountsDF and perCountsDF:
cDFs <- list(countsDF, perCountsDF)
Plots <- list()
for (i in 1:2) {
pCounts <- melt(cDFs[i], variable.name = "sample")
pCounts$gene_type <- factor(pCounts$gene_type, levels = c("non_coding", "ribosome", "other", "repeats", "protein_coding"))
# plot data as barplot:
p <- ggplot(pCounts, aes(x=sample, y=value))
p <- p + geom_bar(stat="identity", aes(fill=gene_type))
Plots[[i]] <- p + theme(text = element_text(size=20), axis.text.x = element_text(angle = 90))
i=i+1
}
pdf(file = paste0(plotDir, "compBarplotCounts.pdf"), height=20, width=35)
Plots[[1]]
dev.off()
pdf(file = paste0(plotDir, "compBarplotPercent.pdf"), height=20, width=35)
Plots[[2]]
dev.off()
pdf(file = paste0(plotDir, "compBarplotPercent80sweater.pdf"), height=20, width=35)
Plots[[2]]
dev.off()
paste0(plotDir, "compBarplotPercent80sweater.pdf")
pdf(file = paste0(plotDir, "compBarplotPercent80sweater.pdf"), height=20, width=35)
Plots[[2]]
dev.off()
i=2
pCounts <- melt(cDFs[i], variable.name = "sample")
pCounts$gene_type <- factor(pCounts$gene_type, levels = c("non_coding", "ribosome", "other", "repeats", "protein_coding"))
# plot data as barplot:
p <- ggplot(pCounts, aes(x=sample, y=value))
p <- p + geom_bar(stat="identity", aes(fill=gene_type))
Plots[[i]] <- p + theme(text = element_text(size=20), axis.text.x = element_text(angle = 90))
i=i+1
Plots[[2]]
dev.off()
pdf(file = paste0(plotDir, "compBarplotPercent80sweater.pdf"), height=20, width=35)
Plots[[2]]
dev.off()
dev.off()
rm(list=ls())
# load packages needed:
library(GenomicRanges)
library(ShortRead)
library("BSgenome.Hsapiens.UCSC.hg38")
library(reshape2)
library(ggplot2)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp2"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "projects/", project, "/")
RobjectDir <- paste0(projectDir, "RNA-seq/Robjects/")
resultsDir <- paste0(projectDir, "/RNA-seq/results")
plotDir <- paste0(resultsDir, "/R/", expName, "/plots/compBarplot/")
# create plotDir:
system(paste0("mkdir -p ", plotDir))
print(paste0("The outDir is: ", plotDir))
### 1. Load in counts lists for each sample ###
allCounts <- grep("subset", list.files(paste0(RobjectDir, "/", expName, "/compCounts"), pattern="_compCounts.rds"), value=T, invert=T)
for (i in 1:length(allCounts)) {
sampleName <- gsub("_compCounts.rds", "", allCounts[i])
if (i==1) {
Counts <- list(readRDS(file=paste0(RobjectDir, expName, "/compCounts/", allCounts[i])))
names(Counts)[i] <- sampleName
} else {
Counts[[i]] <- readRDS(file=paste0(RobjectDir, expName, "/compCounts/", allCounts[i]))
names(Counts)[i] <- sampleName
}
}
### 2. Create barplot ###
# convert Counts to a dataframe, convert each individual value from a list to an integer:
countsDF <- as.data.frame(sapply(as.data.frame(do.call("cbind", Counts)), unlist))
# add rownames as column and melt dataframe:
countsDF$gene_type <- rownames(countsDF)
# calculate percentages as new data frame:
perCountsDF <- as.data.frame(apply(countsDF[,1:ncol(countsDF)-1], 2, function(x) {
return(as.integer(x)/as.integer(sum(x))*100)
}))
perCountsDF$gene_type <- countsDF$gene_type
# create composition barplots of CountsDF and perCountsDF:
cDFs <- list(countsDF, perCountsDF)
Plots <- list()
for (i in 1:2) {
pCounts <- melt(cDFs[i], variable.name = "sample")
pCounts$gene_type <- factor(pCounts$gene_type, levels = c("non_coding", "ribosome", "other", "repeats", "protein_coding"))
# plot data as barplot:
p <- ggplot(pCounts, aes(x=sample, y=value))
p <- p + geom_bar(stat="identity", aes(fill=gene_type))
Plots[[i]] <- p + theme(text = element_text(size=20), axis.text.x = element_text(angle = 90))
i=i+1
}
library(GenomicRanges)
library(ShortRead)
library("BSgenome.Hsapiens.UCSC.hg38")
library(reshape2)
library(ggplot2)
# define starting variables:
project <- "hgsoc_repeats"
expName <- "exp2"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
projectDir <- paste0(homeDir, "projects/", project, "/")
RobjectDir <- paste0(projectDir, "RNA-seq/Robjects/")
resultsDir <- paste0(projectDir, "/RNA-seq/results")
plotDir <- paste0(resultsDir, "/R/", expName, "/plots/compBarplot/")
# create plotDir:
system(paste0("mkdir -p ", plotDir))
print(paste0("The outDir is: ", plotDir))
### 1. Load in counts lists for each sample ###
allCounts <- grep("subset", list.files(paste0(RobjectDir, "/", expName, "/compCounts"), pattern="_compCounts.rds"), value=T, invert=T)
for (i in 1:length(allCounts)) {
sampleName <- gsub("_compCounts.rds", "", allCounts[i])
if (i==1) {
Counts <- list(readRDS(file=paste0(RobjectDir, expName, "/compCounts/", allCounts[i])))
names(Counts)[i] <- sampleName
} else {
Counts[[i]] <- readRDS(file=paste0(RobjectDir, expName, "/compCounts/", allCounts[i]))
names(Counts)[i] <- sampleName
}
}
### 2. Create barplot ###
# convert Counts to a dataframe, convert each individual value from a list to an integer:
countsDF <- as.data.frame(sapply(as.data.frame(do.call("cbind", Counts)), unlist))
# add rownames as column and melt dataframe:
countsDF$gene_type <- rownames(countsDF)
# calculate percentages as new data frame:
perCountsDF <- as.data.frame(apply(countsDF[,1:ncol(countsDF)-1], 2, function(x) {
return(as.integer(x)/as.integer(sum(x))*100)
}))
perCountsDF$gene_type <- countsDF$gene_type
allCounts <- grep("subset", list.files(paste0(RobjectDir, "/", expName, "/compCounts"), pattern="_compCounts.rds"), value=T, invert=T)
allCounts
rm(list=ls())
library(tibble)
library(dplyr)
library(RColorBrewer)
library(RUVSeq)
library(ggplot2)
library(ggrepel)
library(preprocessCore)
# define starting variables:
project <- "hgsoc_repeats"
methodName <- ""
refName <- "human-89.repeats.tab"
expName <- "exp1"
STypes <- c("FT", "erPT", "mrPT", "arPT", "prPT", "rfPT", "msST", "pAF", "rcAF")
CTypes <- c("arPT", "erPT", "FT", "mrPT", "msST", "pAF", "prPT", "rcAF", "rfPT")
annot <- "custom3"
# define directories:
#homeDir <- "/Users/jamestorpy/clusterHome/"
homeDir <- "/share/ScratchGeneral/jamtor/"
#homeDir <- "/Users/jamestorpy/Documents/Garvan/phd"
projectDir <- paste0(homeDir, "/projects/", project)
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/", expName, "/")
plotDir <- paste0(resultsDir, "/R/", expName, "/plots/DEplots/")
system(paste0("mkdir -p ", plotDir))
CTypes
lrt <- readRDS(paste0(RobjectDir, "FT_vs_prPT_lrt.rds"))
project <- "hgsoc_repeats"
methodName <- ""
refName <- "human-89.repeats.tab"
expName <- "exp1"
STypes <- c("FT", "erPT", "mrPT", "arPT", "prPT", "rfPT", "msST", "pAF", "rcAF")
CTypes <- c("arPT", "erPT", "FT", "mrPT", "msST", "pAF", "prPT", "rcAF", "rfPT")
annot <- "custom3"
# define directories:
homeDir <- "/Users/jamestorpy/clusterHome/"
#homeDir <- "/share/ScratchGeneral/jamtor/"
#homeDir <- "/Users/jamestorpy/Documents/Garvan/phd"
projectDir <- paste0(homeDir, "/projects/", project)
resultsDir <- paste0(projectDir, "/RNA-seq/results")
RobjectDir <- paste0(projectDir, "/RNA-seq/Robjects/", expName, "/")
plotDir <- paste0(resultsDir, "/R/", expName, "/plots/DEplots/")
system(paste0("mkdir -p ", plotDir))
lrt <- readRDS(paste0(RobjectDir, "FT_vs_prPT_lrt.rds"))
DEs <- summary(result <- decideTestsDGE((lrt)))
# fetch all gene DE info,
allGenes <- as.data.frame(topTags(lrt, n=Inf))
repGenes <- allGenes[grep("ENS", rownames(allGenes), invert = T),]
sigGenes <- filter(repGenes, FDR<0.05)
print(repGenes)
repGenes$threshold <- as.factor(repGenes$FDR < 0.05 & (repGenes$logFC>=1.5 | repGenes$logFC<=-1.5))
sig <- subset(repGenes, threshold == T)
# include the control genes for labelling:
# add positive and negative control genes CD47, CCNE1, GAPDH, b-actin:
posGenes <- rbind(allGenes["ENSG00000091831",], allGenes["ENSG00000196776",], allGenes["ENSG00000105173",])
negGenes <- rbind(allGenes["ENSG00000111640",], allGenes["ENSG00000075624",], allGenes["ENSG00000204574",],
allGenes["ENSG00000104904",], allGenes["ENSG00000089157",])
rownames(posGenes) <- c("ESR1", "CD47", "CCNE1")
rownames(negGenes) <- c("GAPDH", "beta-actin", "ABCF1", "OAZ1", "RPLP0")
posGenes$threshold <- "POSITIVE"
if (any(posGenes$FDR<0.05 & (posGenes$logFC>=1.5 | posGenes$logFC<=-1.5))) {
posGenes[posGenes$FDR<0.05 & (posGenes$logFC>=1.5 | posGenes$logFC<=-1.5),]$threshold <- "POSSIG"
}
negGenes$threshold = "NEGATIVE"
if (any(negGenes$FDR<0.05 & (negGenes$logFC>=1.5 | negGenes$logFC<=-1.5))) {
negGenes[negGenes$FDR<0.05 & (negGenes$logFC>=1.5 | negGenes$logFC<=-1.5),]$threshold <- "NEGSIG"
}
lab <- rbind(rbind(sig, posGenes), negGenes)
repGenes <- rbind(rbind(repGenes, posGenes), negGenes)
lab$genes <- rownames(lab)
p <- ggplot(data=repGenes, aes(x=logFC, y=-log10(FDR), color=threshold))
p <- p + geom_point(data=repGenes)
p <- p + geom_text_repel(data=lab, aes(label=genes))
p <- p + theme(legend.position = "none")
p <- p + labs(x="log2 fold change vs FT control", y="-log10 FDR")
p <- p +  xlim(c(-7, 7))
p
if (file.exists(paste0(RobjectDir, "/", annot, "_counts.RData"))) {
Counts <- load(file=paste0(RobjectDir, "/", annot, "_counts.RData"))
} else {
Counts <- readRDS(file=paste0(RobjectDir, annot, "_RepeatCounts/all_", annot, "RepeatCountDFs.rds"))
if (annot=="custom3") {
Counts2 <- readRDS(file=paste0(RobjectDir, "c_RepeatCounts/all_cRepeatCountDFs.rds"))
}
if (annot=="custom3") {
Counts <- c(Counts[1], Counts[3:length(Counts)])
}
countsDF <- do.call("rbind", Counts)
if (annot=="custom3") {
countsDF <- rbind(countsDF, Counts2$other[2:3,][,-grep("prPT8", colnames(Counts2$other))])
}
# simplify the row names:
#rownames(countsDF) <- gsub("^.*\\.", "", rownames(countsDF))
# remove duplicate samples:
countsDF <- countsDF[,-which(duplicated(colnames(countsDF)))]
### 2. Load in GCcounts ###
gcFiles <- list.files(paste0(RobjectDir, "/GCcountsDF"), pattern="GCcountsDF", full.names=T)
gcFiles <- grep("subset", gcFiles, value=T, invert=T)
gcL <- list()
j=1
for (f in gcFiles) {
gcL[[j]] <- as.data.frame(readRDS(file = f)[,2])
GCrownames <- readRDS(file = f)[,1]
j=j+1
}
GCcountsDF <- do.call("cbind", gcL)
rownames(GCcountsDF) <- GCrownames
colnames(GCcountsDF) <- colnames(countsDF)
# remove duplicate samples:
GCcountsDF <- GCcountsDF[-which(duplicated(colnames(GCcountsDF)))]
# adjust so GCcountsDF only has columns of samples present in countsDF:
GCcountsDF <- GCcountsDF[,colnames(GCcountsDF) %in% colnames(countsDF)]
# append GCcountsDF to each GRanges object of custom1Counts:
Counts <- rbind(countsDF, GCcountsDF)
# remove lrcT sample:
Counts <- as.data.frame(Counts[,-(grep("lrcT", colnames(Counts)))])
saveRDS(Counts, file=paste0(RobjectDir, "/", annot, "_counts.RData"))
}
### 3. Perform pre-normalisation PCA and RLE plots ###
# eliminate lowly expressed genes (rows where there are less than 3 counts where df > 4):
print(paste0("No. rows before filtering is: ", nrow(Counts)))
Counts <- Counts %>%
rownames_to_column('repeat_id') %>%
dplyr::filter(rowSums(Counts > 6) >= 9) %>%
column_to_rownames('repeat_id')
print(paste0("No. rows after  filtering: ", nrow(Counts)))
# create pre-normalised PCA plot from counts and plot:
Counts <- apply(Counts, 2, unlist)
if (ncol(Counts) > nrow(Counts)) {
pca <- prcomp(Counts)
} else {
pca <- princomp(Counts)
}
if (file.exists(paste0(plotDir, annot, "_pcaCompsPrenormGC.pdf"))) {
print(paste0(plotDir, annot, "_pcaCompsPrenormGC.pdf already exists, no need to create"))
} else {
print(paste0("Creating ", plotDir, annot, "_pcaCompsPrenormGC.pdf"))
pdf(file = paste0(plotDir, annot, "_pcaCompsPrenormGC.pdf"))
plot(pca)
dev.off()
}
splt <- unlist(lapply(split(colnames(Counts), gsub("^.*_*_", "", colnames(Counts))), length))
for (i in 1:length(splt)) {
if (i==1) {
typeF <- c(rep(names(splt)[i], splt[i]))
} else {
typeF <- c(typeF, rep(names(splt)[i], splt[i]))
}
}
levels(typeF) <- c("FT", "erPT", "mrPT", "arPT", "prPT", "rfPT", "msST", "pAF", "rcAF")
# convert matrix into SeqExpressionSet:
set <- newSeqExpressionSet(Counts, phenoData = data.frame(typeF, row.names=colnames(Counts)))
Counts <- load(file=paste0(RobjectDir, "/", annot, "_counts.RData"))
Counts <- readRDS(file=paste0(RobjectDir, annot, "_RepeatCounts/all_", annot, "RepeatCountDFs.rds"))
if (annot=="custom3") {
Counts2 <- readRDS(file=paste0(RobjectDir, "c_RepeatCounts/all_cRepeatCountDFs.rds"))
}
if (annot=="custom3") {
Counts <- c(Counts[1], Counts[3:length(Counts)])
}
countsDF <- do.call("rbind", Counts)
if (annot=="custom3") {
countsDF <- rbind(countsDF, Counts2$other[2:3,][,-grep("prPT8", colnames(Counts2$other))])
}
# simplify the row names:
#rownames(countsDF) <- gsub("^.*\\.", "", rownames(countsDF))
# remove duplicate samples:
countsDF <- countsDF[,-which(duplicated(colnames(countsDF)))]
countsDF
gcFiles <- list.files(paste0(RobjectDir, "/GCcountsDF"), pattern="GCcountsDF", full.names=T)
gcFiles <- grep("subset", gcFiles, value=T, invert=T)
gcL <- list()
j=1
for (f in gcFiles) {
gcL[[j]] <- as.data.frame(readRDS(file = f)[,2])
GCrownames <- readRDS(file = f)[,1]
j=j+1
}
GCcountsDF <- do.call("cbind", gcL)
rownames(GCcountsDF) <- GCrownames
colnames(GCcountsDF) <- colnames(countsDF)
# remove duplicate samples:
GCcountsDF <- GCcountsDF[-which(duplicated(colnames(GCcountsDF)))]
# adjust so GCcountsDF only has columns of samples present in countsDF:
GCcountsDF <- GCcountsDF[,colnames(GCcountsDF) %in% colnames(countsDF)]
# append GCcountsDF to each GRanges object of custom1Counts:
Counts <- rbind(countsDF, GCcountsDF)
# remove lrcT sample:
Counts <- as.data.frame(Counts[,-(grep("lrcT", colnames(Counts)))])
head(Counts)
tail(Counts)
GCcountsDF
gcFiles
gcFiles <- list.files(paste0(RobjectDir, "/GCcountsDF"), pattern="GCcountsDF", full.names=T)
paste0(RobjectDir, "/GCcountsDF")
